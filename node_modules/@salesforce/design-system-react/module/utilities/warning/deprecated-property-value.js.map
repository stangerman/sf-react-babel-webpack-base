{"version":3,"sources":["../../../.tmp-es/utilities/warning/deprecated-property-value.js"],"names":["warning","deprecated","process","env","NODE_ENV","hasWarned","control","comment","propAsString","propValue","deprecatedPropValue","replacementPropAsString","replacementPropAsValue","log","additionalComment","warnOnFirstOccurrenceKey","triggerWarning","replacementSentence","message"],"mappings":"AAAA;;AACA;;AAEA;;AACA;AAEA;AACA,OAAOA,OAAP,MAAoB,SAApB;;AAEA,IAAIC,aAAa,sBAAY,CAAE,CAA/B;;AAEA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAC1C,MAAMC,YAAY,EAAlB;;AAEAJ,eAAa,oBACZK,OADY,QAUZC,OAVY,EAWX;AAAA,QARAC,YAQA,QARAA,YAQA;AAAA,QAPAC,SAOA,QAPAA,SAOA;AAAA,QANAC,mBAMA,QANAA,mBAMA;AAAA,QALAC,uBAKA,QALAA,uBAKA;AAAA,QAJAC,sBAIA,QAJAA,sBAIA;AAAA,QAHAC,GAGA,QAHAA,GAGA;AACD,QAAMC,oBAAoBP,qBAAcA,OAAd,IAA0B,EAApD;AACA,QAAMQ,2BACLT,UAAUE,YAAV,GAAyBE,mBAD1B;AAEA,QAAMM,iBAAiBP,cAAcC,mBAArC;AACA,QAAMO,sBACLP,uBAAuBC,uBAAvB,IAAkDC,sBAAlD,uBACiBJ,YADjB,gBACkCE,mBADlC,uBACmEC,uBADnE,gBAC+FC,sBAD/F,YAEG,EAHJ;;AAKA,QAAI,CAACP,UAAUU,wBAAV,CAAL,EAA0C;AACzC,UAAMG,wDAAkDR,mBAAlD,0BAAuFF,YAAvF,4DAAsJF,OAAtJ,wCAA2LW,mBAA3L,SAAiNH,iBAAjN,CAAN;;AAEA,UAAIE,kBAAkBH,GAAtB,EAA2B;AAC1BA,YAAI;AAAEK;AAAF,SAAJ;AACA,OAFD,MAEO;AACNlB,gBACC,CAACgB,cADF,EACkB;AACjBE,eAFD;AAIA,OAVwC,CAWzC;;;AACAb,gBAAUU,wBAAV,IAAsCC,cAAtC;AACA;AACD,GAnCD;AAoCA;;AAED,eAAef,UAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable import/no-mutable-exports */\n/* eslint-disable max-len */\n\n// This function will deliver an error message to the browser console about the future of a removal and moving of a property's valid value to another prop. This makes the most sense to be used with `oneOf` prop types.\nimport warning from 'warning';\n\nlet deprecated = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n\tconst hasWarned = {};\n\n\tdeprecated = function (\n\t\tcontrol,\n\t\t{\n\t\t\tpropAsString, // key name of prop being warned about\n\t\t\tpropValue, // actual value of prop being warned about\n\t\t\tdeprecatedPropValue, // value that is being deprecated\n\t\t\treplacementPropAsString, // prop that value is being moved to\n\t\t\treplacementPropAsValue, // value that should be used in new prop\n\t\t\tlog, // log function that will disable console warning and pipe to another function log({ message })\n\t\t},\n\t\tcomment\n\t) {\n\t\tconst additionalComment = comment ? ` ${comment}` : '';\n\t\tconst warnOnFirstOccurrenceKey =\n\t\t\tcontrol + propAsString + deprecatedPropValue;\n\t\tconst triggerWarning = propValue === deprecatedPropValue;\n\t\tconst replacementSentence =\n\t\t\tdeprecatedPropValue && replacementPropAsString && replacementPropAsValue\n\t\t\t\t? ` Replace \\`${propAsString}=\"${deprecatedPropValue}\"\\` with \\`${replacementPropAsString}=\"${replacementPropAsValue}\"\\`.`\n\t\t\t\t: '';\n\n\t\tif (!hasWarned[warnOnFirstOccurrenceKey]) {\n\t\t\tconst message = `[Design System React] The value of \\`${deprecatedPropValue}\\`, for prop \\`${propAsString}\\` will be removed in the next major version of ${control}. Please update your props.${replacementSentence}${additionalComment}`;\n\n\t\t\tif (triggerWarning && log) {\n\t\t\t\tlog({ message });\n\t\t\t} else {\n\t\t\t\twarning(\n\t\t\t\t\t!triggerWarning, // false value triggers warning\n\t\t\t\t\tmessage\n\t\t\t\t);\n\t\t\t}\n\t\t\t// store global flag to limit warnings to first issue\n\t\t\thasWarned[warnOnFirstOccurrenceKey] = triggerWarning;\n\t\t}\n\t};\n}\n\nexport default deprecated;\n"],"file":"deprecated-property-value.js"}