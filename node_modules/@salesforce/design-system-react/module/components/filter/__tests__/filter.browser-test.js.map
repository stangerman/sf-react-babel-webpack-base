{"version":3,"sources":["../../../../.tmp-es/components/filter/__tests__/filter.browser-test.jsx"],"names":["React","createReactClass","PropTypes","chai","expect","chaiEnzyme","mount","createMountNode","destroyMountNode","Popover","Button","Filter","IconSettings","use","defaultProps","id","body","heading","defaultIds","trigger","popover","DemoComponent","displayName","propTypes","isOpen","bool","getDefaultProps","getInitialState","render","props","describe","mountNode","portalWrapper","wrapper","beforeEach","context","afterEach","it","demoPopover","attachTo","find","to","exist","done","onFilterClicked","onClick","setTimeout","filterButton","simulate","be","true"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,IAAeC,MAAf,QAA6B,MAA7B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA;;;;;;AAKA,SACCC,eADD,EAECC,gBAFD,QAGO,+BAHP,C,CAKA;;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA;;;;AAGAT,KAAKU,GAAL,CAASR,YAAT;AAEA,IAAMS,eAAe;AACpBC,MAAI,gBADgB;AAEpBC,QAAM;AAAM,QAAG;AAAT,wBAFc;AAGpBC,WAAS;AAAM,QAAG;AAAT;AAHW,CAArB;AAMA,IAAMC,aAAa;AAClBC,WAASL,aAAaC,EADJ;AAElBK,qBAAYN,aAAaC,EAAzB,aAFkB;AAGlBC,kBAASF,aAAaC,EAAtB,iBAHkB;AAIlBE,qBAAYH,aAAaC,EAAzB;AAJkB,CAAnB;AAOA;;;;;;AAKA,IAAMM,gBAAgBpB,iBAAiB;AACtCqB,eAAa,sBADyB;AAEtCC,aAAW;AACVC,YAAQtB,UAAUuB;AADR,GAF2B;AAMtCC,iBANsC,6BAMnB;AAClB,WAAOZ,YAAP;AACA,GARqC;AAUtCa,iBAVsC,6BAUnB;AAClB,WAAO,EAAP;AACA,GAZqC;AActCC,QAdsC,oBAc5B;AACT,WACC,oBAAC,OAAD,EAAa,KAAKC,KAAlB,EACC,oBAAC,MAAD;AAAQ,aAAM;AAAd,MADD,CADD;AAKA;AApBqC,CAAjB,CAAtB;AAuBA;;;;;;;;;;AASAC,SAAS,YAAT,EAAuB,YAAY;AAClC,MAAIC,SAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,OAAJ,CAHkC,CAKlC;;AAEAH,WAAS,oCAAT,EAA+C,YAAY;AAAA;;AAC1DI,eAAW,YAAM;AAChBH,kBAAYxB,gBAAgB;AAAE4B,iBAAS;AAAX,OAAhB,CAAZ;AACA,KAFD;AAIAC,cAAU,YAAM;AACf5B,uBAAiB;AAAEyB,wBAAF;AAAWF;AAAX,OAAjB;AACA,KAFD;AAIAM,OAAG,mHAAH,EAAwH,YAAM;AAC7H,UAAMC,cACL,oBAAC,aAAD;AACC,mBAAU,uBADX;AAEC,oBAFD;AAGC,kBAAS;AAHV,QADD;AAOAL,gBAAU3B,MACT,oBAAC,YAAD;AAAc,kBAAS;AAAvB,SACC,oBAAC,MAAD;AACC,kBAAS,SADV;AAEC,mBAAU,mBAFX;AAGC,iBAASgC;AAHV,QADD,CADS,EAQT;AAAEC,kBAAUR;AAAZ,OARS,CAAV;AAWA3B,aAAO6B,QAAQO,IAAR,CAAa,wBAAb,CAAP,EAA+CC,EAA/C,CAAkDC,KAAlD;AACA,KApBD;AAqBA,GA9BD;AAgCAZ,WAAS,0CAAT,EAAqD,YAAY;AAAA;;AAChEI,eAAW,YAAM;AAChBH,kBAAYxB,gBAAgB;AAAE4B,iBAAS;AAAX,OAAhB,CAAZ;AACA,KAFD;AAIAC,cAAU,YAAM;AACf5B,uBAAiB;AAAEyB,wBAAF;AAAWF;AAAX,OAAjB;AACA,KAFD;AAIAM,OAAG,8EAAH,EAAmF,UAACM,IAAD,EAAU;AAC5F,UAAML,cAAc,oBAAC,aAAD;AAAe,mBAAU;AAAzB,QAApB;AAEA,UAAIM,kBAAkB,KAAtB;;AAEA,UAAMC,UAAU,SAAVA,OAAU,GAAM;AACrBD,0BAAkB,IAAlB;AACA,OAFD;;AAIAX,gBAAU3B,MACT,oBAAC,YAAD;AAAc,kBAAS;AAAvB,SACC,oBAAC,MAAD;AACC,kBAAS,SADV;AAEC,mBAAU,mBAFX;AAGC,iBAASgC,WAHV;AAIC,iBAASO;AAJV,QADD,CADS,EAST;AAAEN,kBAAUR;AAAZ,OATS,CAAV;AAYAe,iBAAW,YAAM;AAChB,YAAMC,eAAed,QAAQO,IAAR,CACpB,yCADoB,CAArB;AAGAO,qBAAaC,QAAb,CAAsB,OAAtB,EAA+B,EAA/B;AACA5C,eAAOwC,eAAP,EAAwBH,EAAxB,CAA2BQ,EAA3B,CAA8BC,IAA9B;AACAP;AACA,OAPD,EAOG,CAPH;AAQA,KA7BD;AA8BA,GAvCD;AAwCA,CA/ED","sourcesContent":["import React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport chai, { expect } from 'chai';\nimport chaiEnzyme from 'chai-enzyme';\nimport { mount } from 'enzyme';\n\n/* Enzyme Helpers that can mount and unmount React component instances to\n * the DOM and set `this.wrapper` and `this.dom` within Mocha's `this`\n * context [full source here](tests/enzyme-helpers.js). `this` can\n * only be referenced if inside `function () {}`.\n */\nimport {\n\tcreateMountNode,\n\tdestroyMountNode,\n} from '../../../tests/enzyme-helpers';\n\n// Import your internal dependencies (for example):\nimport Popover from '../../popover';\nimport Button from '../../button';\nimport Filter from '../../filter';\nimport IconSettings from '../../icon-settings';\n\n/* Set Chai to use chaiEnzyme for enzyme compatible assertions:\n * https://github.com/producthunt/chai-enzyme\n */\nchai.use(chaiEnzyme());\n\nconst defaultProps = {\n\tid: 'sample-popover',\n\tbody: <span id=\"sample-body\">This is the body</span>,\n\theading: <span id=\"sample-heading\">This is the heading</span>,\n};\n\nconst defaultIds = {\n\ttrigger: defaultProps.id,\n\tpopover: `${defaultProps.id}-popover`,\n\tbody: `${defaultProps.id}-dialog-body`,\n\theading: `${defaultProps.id}-dialog-heading`,\n};\n\n/* A re-usable demo component fixture outside of `describe` sections\n * can accept props within each test and be unmounted after each tests.\n * This wrapping component will be similar to your wrapping component\n * you will create in the React Storybook for manual testing.\n */\nconst DemoComponent = createReactClass({\n\tdisplayName: 'PopoverDemoComponent',\n\tpropTypes: {\n\t\tisOpen: PropTypes.bool,\n\t},\n\n\tgetDefaultProps () {\n\t\treturn defaultProps;\n\t},\n\n\tgetInitialState () {\n\t\treturn {};\n\t},\n\n\trender () {\n\t\treturn (\n\t\t\t<Popover {...this.props}>\n\t\t\t\t<Button label=\"Trigger Popover\" />\n\t\t\t</Popover>\n\t\t);\n\t},\n});\n\n/* All tests for component being tested should be wrapped in a root `describe`,\n * which should be named after the component being tested.\n * When read aloud, the cumulative `describe` and `it` names should form a coherent\n * sentence, eg \"Date Picker default structure and css is present with expected\n * attributes set\". If you are having trouble constructing a cumulative short\n * sentence, this may be an indicator that your test is poorly structured.\n * String provided as first parameter names the `describe` section. Limit to nouns\n * as much as possible/appropriate.`\n */\ndescribe('SLDSFilter', function () {\n\tlet mountNode;\n\tlet portalWrapper;\n\tlet wrapper;\n\n\t// BASIC STRUCTURE\n\n\tdescribe('Add custom props to Filter Popover', function () {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('Filter could take popover as a prop and use the props of popover to render, verifies the custom popover className', () => {\n\t\t\tconst demoPopover = (\n\t\t\t\t<DemoComponent\n\t\t\t\t\tclassName=\"custom-filter-popover\"\n\t\t\t\t\tisOpen\n\t\t\t\t\tposition=\"absolute\"\n\t\t\t\t/>\n\t\t\t);\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<Filter\n\t\t\t\t\t\tproperty=\"Show Me\"\n\t\t\t\t\t\tpredicate=\"All Opportunities\"\n\t\t\t\t\t\tpopover={demoPopover}\n\t\t\t\t\t/>\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\texpect(wrapper.find('.custom-filter-popover')).to.exist;\n\t\t});\n\t});\n\n\tdescribe('On click handler when clicking on filter', function () {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('Filter could take onClick prop and trigger this callback during filter click', (done) => {\n\t\t\tconst demoPopover = <DemoComponent className=\"custom-filter-popover\" />;\n\n\t\t\tlet onFilterClicked = false;\n\n\t\t\tconst onClick = () => {\n\t\t\t\tonFilterClicked = true;\n\t\t\t};\n\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<Filter\n\t\t\t\t\t\tproperty=\"Show Me\"\n\t\t\t\t\t\tpredicate=\"All Opportunities\"\n\t\t\t\t\t\tpopover={demoPopover}\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t/>\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst filterButton = wrapper.find(\n\t\t\t\t\t'.slds-filters__item .slds-button--reset'\n\t\t\t\t);\n\t\t\t\tfilterButton.simulate('click', {});\n\t\t\t\texpect(onFilterClicked).to.be.true;\n\t\t\t\tdone();\n\t\t\t}, 0);\n\t\t});\n\t});\n});\n"],"file":"filter.browser-test.js"}