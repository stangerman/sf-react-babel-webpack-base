{"version":3,"sources":["../../../../.tmp-es/components/tooltip/__tests__/tooltip.browser-test.jsx"],"names":["React","ReactDOM","expect","TestUtils","SLDSPopoverTooltip","SLDSButton","Simulate","findRenderedDOMComponentWithTag","findRenderedDOMComponentWithClass","describe","body","defaultTrigger","defaultTextContent","defaultProps","content","width","hasStaticAlignment","id","afterEach","Array","prototype","forEach","call","document","querySelectorAll","component","removeChild","e","createBody","target","createElement","textContent","style","height","appendChild","renderTooltip","inst","render","createTooltip","props","kids","generateTooltip","getTip","dom","querySelector","rootNode","beforeEach","align","it","to","equal","tip","trigger","done","mouseEnter","setTimeout","tooltipOffset","tipBounds","getBoundingClientRect","triggerBounds","top","be","within","className","include","mouseLeave","null","isOpen","contentRendered","tooltipContentRendered","not"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-render-return-value */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { expect } from 'chai';\nimport TestUtils from 'react-addons-test-utils';\n\nimport SLDSPopoverTooltip from '../../popover-tooltip';\nimport SLDSButton from '../../button';\n\nconst {\n\tSimulate,\n\tfindRenderedDOMComponentWithTag,\n\tfindRenderedDOMComponentWithClass,\n} = TestUtils;\n\ndescribe('SLDSTooltip: ', function () {\n\tlet body;\n\n\tconst defaultTrigger = <SLDSButton label=\"Hover me for tooltip\" />;\n\tconst defaultTextContent = 'This is more info. blah blah.';\n\tconst defaultProps = {\n\t\tcontent: (\n\t\t\t<span className=\"tooltip-content\" style={{ width: 30 }}>\n\t\t\t\t{defaultTextContent}\n\t\t\t</span>\n\t\t),\n\t\thasStaticAlignment: true,\n\t\tid: 'myTooltip123',\n\t};\n\n\tafterEach(() => {\n\t\ttry {\n\t\t\tArray.prototype.forEach.call(\n\t\t\t\tdocument.body.querySelectorAll('.drop'),\n\t\t\t\t(component) => document.body.removeChild(component)\n\t\t\t);\n\t\t\tif (body) {\n\t\t\t\tdocument.body.removeChild(body);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t/* empty */\n\t\t}\n\t});\n\n\tconst createBody = () => {\n\t\tconst target = document.createElement('h1');\n\t\ttarget.textContent = 'Tooltip Tip Target';\n\t\tbody = document.createElement('div');\n\t\tbody.style.height = '300px';\n\t\tbody.style.width = '300px';\n\t\tbody.appendChild(target);\n\t\tdocument.body.appendChild(body);\n\t};\n\n\tconst renderTooltip = (inst) => ReactDOM.render(inst, body);\n\n\tconst createTooltip = (props, kids) =>\n\t\tReact.createElement(SLDSPopoverTooltip, props, kids);\n\n\tconst generateTooltip = (props, kids) =>\n\t\trenderTooltip(createTooltip(props, kids));\n\n\tconst getTip = (dom) => dom.querySelector('.slds-popover--tooltip');\n\n\tdescribe('component basic props render', () => {\n\t\tlet rootNode;\n\n\t\tbeforeEach(() => {\n\t\t\tcreateBody();\n\t\t\trootNode = generateTooltip(\n\t\t\t\t{\n\t\t\t\t\t...defaultProps,\n\t\t\t\t\talign: 'top',\n\t\t\t\t},\n\t\t\t\tdefaultTrigger\n\t\t\t);\n\t\t});\n\n\t\tit('is not open', () => {\n\t\t\texpect(getTip(document.body)).to.equal(null);\n\t\t});\n\n\t\tdescribe('expanded', () => {\n\t\t\tlet tip;\n\t\t\tlet trigger;\n\n\t\t\tbeforeEach((done) => {\n\t\t\t\ttrigger = findRenderedDOMComponentWithTag(rootNode, 'button');\n\t\t\t\tSimulate.mouseEnter(trigger, {});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\ttip = getTip(document.body);\n\t\t\t\t\tdone();\n\t\t\t\t}, 0);\n\t\t\t});\n\n\t\t\tit('places bottom aligned tooltip at the trigger if no target', (done) => {\n\t\t\t\t// \"Magic Number\" in pixels, based on size of trigger, CSS, and DropJS offset\n\t\t\t\tconst tooltipOffset = 46;\n\t\t\t\tconst tipBounds = tip.getBoundingClientRect();\n\t\t\t\tconst triggerBounds = trigger.getBoundingClientRect();\n\t\t\t\texpect(tipBounds.top).to.be.within(\n\t\t\t\t\ttriggerBounds.top - tooltipOffset,\n\t\t\t\t\ttriggerBounds.top\n\t\t\t\t);\n\t\t\t\tdone();\n\t\t\t});\n\n\t\t\tit('adds nubbin', () => {\n\t\t\t\texpect(tip.className).to.include('slds-nubbin--bottom');\n\t\t\t});\n\n\t\t\tit('closes', (done) => {\n\t\t\t\tSimulate.mouseLeave(trigger, {});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\texpect(getTip(document.body)).to.be.null;\n\t\t\t\t\tdone();\n\t\t\t\t}, 600);\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Custom props work as expected', () => {\n\t\tit('isOpen is false', (done) => {\n\t\t\tconst rootNode = generateTooltip(\n\t\t\t\t{\n\t\t\t\t\t...defaultProps,\n\t\t\t\t\tisOpen: false,\n\t\t\t\t},\n\t\t\t\tdefaultTrigger\n\t\t\t);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst trigger = findRenderedDOMComponentWithTag(rootNode, 'button');\n\t\t\t\tSimulate.mouseEnter(trigger, {});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\texpect(getTip(document.body)).to.be.null;\n\t\t\t\t\tdone();\n\t\t\t\t}, 0);\n\t\t\t}, 0);\n\t\t});\n\n\t\tit('isOpen is true', (done) => {\n\t\t\tlet contentRendered;\n\n\t\t\tconst tooltipContentRendered = (component) => {\n\t\t\t\tthis.tip = getTip(document.body);\n\t\t\t\tif (!contentRendered) {\n\t\t\t\t\texpect(component).to.not.be.null;\n\t\t\t\t\tcontentRendered = true;\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tgenerateTooltip(\n\t\t\t\t{\n\t\t\t\t\t...defaultProps,\n\t\t\t\t\t// overwrite default content\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tref={tooltipContentRendered}\n\t\t\t\t\t\t\tclassName=\"tooltip-content\"\n\t\t\t\t\t\t\tstyle={{ width: 30 }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{defaultTextContent}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t),\n\t\t\t\t\tisOpen: true,\n\t\t\t\t},\n\t\t\t\tdefaultTrigger\n\t\t\t);\n\t\t});\n\t});\n\n\t/*\n\t// Commented out until fully understood.\n\tdescribe('using target', () => {\n\t\tlet rootNode, trigger;\n\n\t\tbeforeEach(() => {\n\t\t\tconst content = (<span style={{width: 30}}>This is more info. blah blah.</span>);\n\t\t\tcreateBody();\n\t\t\trootNode = generateTooltip({\n\t\t\t\talign: 'bottom',\n\t\t\t\tcontent: content,\n\t\t\t\ttarget: body.firstChild\n\t\t\t}, React.createElement(SLDSButton, {}), ['Hover me for tooltip']);\n\t\t\ttrigger = document.body.querySelector('[role=tooltip]').firstChild;\n\t\t})\n\n\t\tdescribe('expanded', () => {\n\t\t\tlet tip;\n\n\t\t\tbeforeEach((done) => {\n\t\t\t\texpect(getTip(document.body)).to.equal(null);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tSimulate.mouseEnter(trigger, {})\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\ttip = getTip(document.body);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}, 200);\n\t\t\t\t}, 200);\n\t\t\t});\n\n\t\t\tit('sets the tooltip close to the target, not the trigger', () => {\n\t\t\t\t// \"Magic Number\" in pixels, based on size of trigger and CSS\n\t\t\t\tconst tooltipOffset = 40;\n\t\t\t\tconst tipBounds = tip.getBoundingClientRect();\n\t\t\t\tconst targetBounds = body.firstChild.getBoundingClientRect();\n\t\t\t\tconsole.log(tipBounds);\n\t\t\t\tconsole.log(targetBounds);\n\t\t\t\texpect(tipBounds.bottom).to.be.within(targetBounds.bottom, targetBounds.bottom + tooltipOffset);\n\t\t\t})\n\t\t})\n\t})\n\t*/\n});\n"],"file":"tooltip.browser-test.js"}