{"version":3,"sources":["../../../.tmp-es/components/tooltip/index.jsx"],"names":["React","PropTypes","classNames","shortid","POPOVER_TOOLTIP","Dialog","Icon","getMargin","getNubbinClassName","checkProps","displayName","propTypes","align","oneOf","isRequired","assistiveText","shape","tooltipTipLearnMoreIcon","string","triggerLearnMoreIcon","children","node","content","hasStaticAlignment","bool","hoverCloseDelay","number","id","labels","learnMoreAfter","learnMoreBefore","isOpen","triggerClassName","oneOfType","array","object","position","triggerStyle","theme","variant","defaultProps","Tooltip","props","setState","isClosing","setTimeout","isUnmounting","state","component","trigger","triggerRendered","generatedId","generate","Children","count","onClickTrigger","label","map","child","i","cloneElement","key","getId","onBlur","handleMouseLeave","onFocus","handleMouseEnter","onMouseEnter","onMouseLeave","undefined","deprecatedWay","context","handleCancel","getTooltipTarget","marginBottom","bottom","marginLeft","left","marginRight","right","marginTop","top","getTooltipContent","target","containerStyles","display","saveTriggerRef","getContent","getTooltip","Component","contextTypes","iconPath"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # Tooltip\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\n// ### shortid\n// [npmjs.com/package/shortid](https://www.npmjs.com/package/shortid)\n// shortid is a short, non-sequential, url-friendly, unique id generator\nimport shortid from 'shortid';\n\nimport { POPOVER_TOOLTIP } from '../../utilities/constants';\n\nimport Dialog from '../utilities/dialog';\nimport Icon from '../icon';\nimport { getMargin, getNubbinClassName } from '../../utilities/dialog-helpers';\n\n// This component's `checkProps` which issues warnings to developers about properties when in development mode (similar to React's built in development tools)\nimport checkProps from './check-props';\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nconst displayName = POPOVER_TOOLTIP;\n\nconst propTypes = {\n\t/**\n\t * Alignment of the Tooltip relative to the element that triggers it.\n\t */\n\talign: PropTypes.oneOf([\n\t\t'top',\n\t\t'top left',\n\t\t'top right',\n\t\t'right',\n\t\t'right top',\n\t\t'right bottom',\n\t\t'bottom',\n\t\t'bottom left',\n\t\t'bottom right',\n\t\t'left',\n\t\t'left top',\n\t\t'left bottom',\n\t]).isRequired,\n\t/**\n\t * **Assistive text for accessibility**\n\t * This object is merged with the default props object on every render.\n\t * * `tooltipTipLearnMoreIcon`: This text is inside the info icon within the tooltip content and exists to \"complete the sentence\" for assistive tech users.\n\t * * `triggerLearnMoreIcon`: This text is inside the info icon that triggers the tooltip in order to have text within the link.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttooltipTipLearnMoreIcon: PropTypes.string,\n\t\ttriggerLearnMoreIcon: PropTypes.string,\n\t}),\n\t/**\n\t * Pass the one element that triggers the Tooltip as a child. It must be an element with `tabIndex` or an element that already has a `tabIndex` set such as an anchor or a button, so that keyboard users can tab to it.\n\t */\n\tchildren: PropTypes.node,\n\t/**\n\t * Content inside Tooltip.\n\t */\n\tcontent: PropTypes.node.isRequired,\n\t/**\n\t * By default, dialogs will flip their alignment (such as bottom to top) if they extend beyond a boundary element such as a scrolling parent or a window/viewpoint. `hasStaticAlignment` disables this behavior and allows this component to extend beyond boundary elements. _Not tested._\n\t */\n\thasStaticAlignment: PropTypes.bool,\n\t/**\n\t * Delay on Tooltip closing.\n\t */\n\thoverCloseDelay: PropTypes.number,\n\t/**\n\t * A unique ID is needed in order to support keyboard navigation, ARIA support, and connect the popover to the triggering element.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * **Text labels for internationalization**\n\t * This object is merged with the default props object on every render.\n\t * * `learnMoreAfter`: This label appears in the tooltip after the info icon.\n\t * * `learnMoreBefore`: This label appears in the tooltip before the info icon.\n\t */\n\tlabels: PropTypes.shape({\n\t\tlearnMoreAfter: PropTypes.string,\n\t\tlearnMoreBefore: PropTypes.string,\n\t}),\n\t/**\n\t * Forces tooltip to be open. A value of `false` will disable any interaction with the tooltip.\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * CSS classes to be added to tag with `slds-tooltip-trigger`.\n\t */\n\ttriggerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Please select one of the following:\n\t * * `absolute` - (default) The dialog will use `position: absolute` and style attributes to position itself. This allows inverted placement or flipping of the dialog.\n\t * * `overflowBoundaryElement` - The dialog will overflow scrolling parents. Use on elements that are aligned to the left or right of their target and don't care about the target being within a scrolling parent. Typically this is a popover or tooltip. Dropdown menus can usually open up and down if no room exists. In order to achieve this a portal element will be created and attached to `body`. This element will render into that detached render tree.\n\t * * `relative` - No styling or portals will be used. Menus will be positioned relative to their triggers. This is a great choice for HTML snapshot testing.\n\t */\n\tposition: PropTypes.oneOf([\n\t\t'absolute',\n\t\t'overflowBoundaryElement',\n\t\t'relative',\n\t]),\n\t/**\n\t * Custom styles to be added to wrapping triggering `div`.\n\t */\n\ttriggerStyle: PropTypes.object,\n\t/**\n\t * Determines the theme of tooltip: for informative purpose (blue background) or warning purpose (red background). This used to be `variant`.\n\t */\n\ttheme: PropTypes.oneOf(['info', 'error']),\n\t/**\n\t * Determines the type of the tooltip.\n\t */\n\tvariant: PropTypes.oneOf(['base', 'learnMore']),\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\ttooltipTipLearnMoreIcon: 'this link',\n\t\ttriggerLearnMoreIcon: 'Learn More',\n\t},\n\talign: 'top',\n\tcontent: <span>Tooltip</span>,\n\tlabels: {\n\t\tlearnMoreAfter: 'to learn more.',\n\t\tlearnMoreBefore: 'Click',\n\t},\n\thoverCloseDelay: 50,\n\tposition: 'absolute',\n\ttheme: 'info',\n\tvariant: 'base',\n};\n\n/**\n * The PopoverTooltip component is variant of the Lightning Design System Popover component. This component wraps an element that triggers it to open. It must be a focusable child element (either a button or an anchor), so that keyboard users can navigate to it.\n */\nclass Tooltip extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisClosing: false,\n\t\t\tisOpen: false,\n\t\t};\n\t}\n\n\tcomponentWillMount () {\n\t\t// `checkProps` issues warnings to developers about properties (similar to React's built in development tools)\n\t\tcheckProps(POPOVER_TOOLTIP, this.props);\n\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\tcomponentWillUnmount () {\n\t\tthis.isUnmounting = true;\n\t}\n\n\tgetContent () {\n\t\tlet children;\n\n\t\tif (React.Children.count(this.props.children) === 0) {\n\t\t\tchildren = [\n\t\t\t\t<a href=\"javascript:void(0)\" onClick={this.props.onClickTrigger}>\n\t\t\t\t\t<Icon\n\t\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\t\tname=\"info\"\n\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\tlabel: this.props.assistiveText.triggerLearnMoreIcon,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t/>\n\t\t\t\t</a>,\n\t\t\t];\n\t\t} else {\n\t\t\tchildren = this.props.children;\n\t\t}\n\n\t\treturn React.Children.map(children, (child, i) =>\n\t\t\tReact.cloneElement(child, {\n\t\t\t\tkey: i,\n\t\t\t\t'aria-describedby': this.getId(),\n\t\t\t\tonBlur: this.handleMouseLeave,\n\t\t\t\tonFocus: this.handleMouseEnter,\n\t\t\t\tonMouseEnter: this.handleMouseEnter,\n\t\t\t\tonMouseLeave: this.handleMouseLeave,\n\t\t\t})\n\t\t);\n\t}\n\n\tgetId () {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetTooltip () {\n\t\tconst isOpen =\n\t\t\tthis.props.isOpen === undefined ? this.state.isOpen : this.props.isOpen;\n\t\tconst align = this.props.align;\n\n\t\t// REMOVE AT NEXT BREAKING CHANGE (v1.0 or v0.9)\n\t\tconst deprecatedWay = this.props.variant === 'error';\n\n\t\treturn isOpen ? (\n\t\t\t<Dialog\n\t\t\t\talign={align}\n\t\t\t\tcontext={this.context}\n\t\t\t\tcloseOnTabKey\n\t\t\t\thasStaticAlignment={this.props.hasStaticAlignment}\n\t\t\t\tonClose={this.handleCancel}\n\t\t\t\tonRequestTargetElement={() => this.getTooltipTarget()}\n\t\t\t\tposition={this.props.position}\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginBottom: getMargin.bottom(align),\n\t\t\t\t\tmarginLeft: getMargin.left(align),\n\t\t\t\t\tmarginRight: getMargin.right(align),\n\t\t\t\t\tmarginTop: getMargin.top(align),\n\t\t\t\t}}\n\t\t\t\tvariant=\"tooltip\"\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tid={this.getId()}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-popover',\n\t\t\t\t\t\t'slds-popover--tooltip',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'slds-theme_error': this.props.theme === 'error' || deprecatedWay,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgetNubbinClassName(align)\n\t\t\t\t\t)}\n\t\t\t\t\trole=\"tooltip\"\n\t\t\t\t>\n\t\t\t\t\t{this.getTooltipContent()}\n\t\t\t\t</div>\n\t\t\t</Dialog>\n\t\t) : (\n\t\t\t<span />\n\t\t);\n\t}\n\n\tgetTooltipContent () {\n\t\treturn (\n\t\t\t<div className=\"slds-popover__body\">\n\t\t\t\t{this.props.content}\n\t\t\t\t{this.props.variant === 'learnMore' ? (\n\t\t\t\t\t<div className=\"slds-m-top_x-small\">\n\t\t\t\t\t\t{this.props.labels.learnMoreBefore}{' '}\n\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\t\t\tlabel: this.props.assistiveText.tooltipTipLearnMoreIcon,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tcategory=\"utility\"\n\t\t\t\t\t\t\tinverse\n\t\t\t\t\t\t\tname=\"info\"\n\t\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t{this.props.labels.learnMoreAfter}{' '}\n\t\t\t\t\t</div>\n\t\t\t\t) : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetTooltipTarget () {\n\t\treturn this.props.target ? this.props.target : this.trigger;\n\t}\n\n\thandleCancel = () => {\n\t\tthis.setState({\n\t\t\tisOpen: false,\n\t\t\tisClosing: false,\n\t\t});\n\t};\n\n\thandleMouseEnter = () => {\n\t\tthis.setState({\n\t\t\tisOpen: true,\n\t\t\tisClosing: false,\n\t\t});\n\t};\n\n\thandleMouseLeave = () => {\n\t\tthis.setState({ isClosing: true });\n\n\t\tsetTimeout(() => {\n\t\t\tif (!this.isUnmounting && this.state.isClosing) {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisOpen: false,\n\t\t\t\t\tisClosing: false,\n\t\t\t\t});\n\t\t\t}\n\t\t}, this.props.hoverCloseDelay);\n\t};\n\n\tsaveTriggerRef = (component) => {\n\t\tthis.trigger = component;\n\t\t// yes, this is a re-render triggered by a render.\n\t\t// Dialog/Popper.js cannot place the popover until\n\t\t// the trigger/target DOM node is mounted. This\n\t\t// way `findDOMNode` is not called and parent\n\t\t// DOM nodes are not queried.\n\t\tif (!this.state.triggerRendered) {\n\t\t\tthis.setState({ triggerRendered: true });\n\t\t}\n\t};\n\n\trender () {\n\t\tconst containerStyles = { display: 'inline', ...this.props.triggerStyle };\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-tooltip-trigger',\n\t\t\t\t\tthis.props.triggerClassName\n\t\t\t\t)}\n\t\t\t\tstyle={containerStyles}\n\t\t\t\tref={this.saveTriggerRef}\n\t\t\t>\n\t\t\t\t{this.getContent()}\n\t\t\t\t{this.getTooltip()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nTooltip.contextTypes = {\n\ticonPath: PropTypes.string,\n};\n\nTooltip.displayName = displayName;\nTooltip.propTypes = propTypes;\nTooltip.defaultProps = defaultProps;\n\nexport default Tooltip;\n"],"file":"index.js"}