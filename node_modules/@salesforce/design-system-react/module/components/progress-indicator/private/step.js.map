{"version":3,"sources":["../../../../.tmp-es/components/progress-indicator/private/step.jsx"],"names":["React","PropTypes","classNames","Tooltip","PROGRESS_INDICATOR_STEP","ButtonIcon","displayName","propTypes","id","oneOfType","number","string","index","isCompleted","bool","isDisabled","isError","isSelected","label","node","onClick","func","onFocus","step","object","tooltipIsOpen","Step","renderIcon","status","props","data","icon","handleClick","event","handleFocus","stepButton","assistiveText","tooltipProps","align","content","theme","triggerStyle","display","isOpen","buttonIcon","Component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\n// [github.com/JedWatson/classnames](https://github.com/JedWatson/classnames)\n// This project uses `classnames`, 'a simple javascript utility for conditionally\n// joining classNames together.'\nimport classNames from 'classnames';\n\n// Child component\nimport Tooltip from '../../tooltip';\nimport { PROGRESS_INDICATOR_STEP } from '../../../utilities/constants';\nimport ButtonIcon from '../../icon/button-icon';\n\n// ### Display Name\nconst displayName = PROGRESS_INDICATOR_STEP;\n\n// ### Prop Types\nconst propTypes = {\n\t/**\n\t * Id for Steps, ranging in [0, steps.length).\n\t */\n\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * Index of step. Used for id's if no step ID exists\n\t */\n\tindex: PropTypes.number,\n\t/**\n\t * Determines if the step has been completed\n\t */\n\tisCompleted: PropTypes.bool,\n\t/**\n\t * Determines if the step has been disabled\n\t */\n\tisDisabled: PropTypes.bool,\n\t/**\n\t * Determines if the step contains an error\n\t */\n\tisError: PropTypes.bool,\n\t/**\n\t * Determines if the step is currently selected (active)\n\t */\n\tisSelected: PropTypes.bool,\n\t/**\n\t * Label of tooltip attached to the step if applicable.\n\t */\n\tlabel: PropTypes.node,\n\t/**\n\t * Triggered when click on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Triggered when focus on individual steps. By default, it receives an event and returns all info passed to that step.\n\t * users are able to re-define it by passing a function as a prop\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Step object. This is passed into event callbacks.\n\t */\n\tstep: PropTypes.object,\n\t/**\n\t * Determines if the tooltip attached to step is always open.\n\t * This is mainly for dev test purpose.\n\t * Usually the tooltip should only show when hover.\n\t */\n\ttooltipIsOpen: PropTypes.bool,\n};\n\n/**\n * Step renders a button icon and its tooltip if applied.\n * The button is applied with different css classes under different conditions.\n * Button icons have 4 types of status: completed (success), active (in progress), error (warning) and uncompleted (not approached)\n */\nclass Step extends React.Component {\n\t/**\n\t * buttonIcon represents the button icon used for each step.\n\t * the button is applied with different css classes under different conditions.\n\t */\n\tbuttonIcon (renderIcon, status, props) {\n\t\tconst data = {\n\t\t\tisSelected: props.isSelected,\n\t\t\tisError: props.isError,\n\t\t\tisCompleted: props.isCompleted,\n\t\t\tisDisabled: props.isDisabled,\n\t\t\tstep: props.step,\n\t\t};\n\n\t\tconst icon = renderIcon ? (\n\t\t\t<ButtonIcon\n\t\t\t\tcategory=\"utility\"\n\t\t\t\tname={this.props.isError ? 'warning' : 'success'}\n\t\t\t/>\n\t\t) : null;\n\n\t\tconst handleClick = (event) => props.onClick(event, data);\n\t\tconst handleFocus = (event) => props.onFocus(event, data);\n\n\t\tconst stepButton = props.isDisabled ? (\n\t\t\t<span\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon }\n\t\t\t\t)}\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\t\tthis.props.index}`}\n\t\t\t\ttabIndex={0}\n\t\t\t\trole=\"button\"\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{props.step.assistiveText || `Step ${props.index + 1}: ${status}`}\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t) : (\n\t\t\t<button\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t'slds-button',\n\t\t\t\t\t{ 'slds-button_icon': renderIcon },\n\t\t\t\t\t'slds-progress__marker',\n\t\t\t\t\t{ 'slds-progress__marker_icon': renderIcon }\n\t\t\t\t)}\n\t\t\t\tonClick={handleClick}\n\t\t\t\tonFocus={handleFocus}\n\t\t\t\taria-describedby={`progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\t\tthis.props.index}`}\n\t\t\t>\n\t\t\t\t{icon}\n\t\t\t\t<span className=\"slds-assistive-text\">\n\t\t\t\t\t{props.step.assistiveText || `Step ${props.index + 1}: ${status}`}\n\t\t\t\t</span>\n\t\t\t</button>\n\t\t);\n\n\t\treturn stepButton;\n\t}\n\n\trender () {\n\t\tconst renderIcon = this.props.isCompleted || this.props.isError;\n\t\t// step status (one of ['Error', 'Completed', 'Active', 'Uncompleted'])\n\t\tlet status = '';\n\t\tif (this.props.isError) {\n\t\t\tstatus = 'Error';\n\t\t} else if (this.props.isCompleted) {\n\t\t\tstatus = 'Completed';\n\t\t} else if (this.props.isSelected) {\n\t\t\tstatus = 'Active';\n\t\t} else status = 'Uncompleted';\n\n\t\tconst tooltipProps = {\n\t\t\talign: 'top',\n\t\t\tid: `progress-indicator-tooltip-${this.props.step.id ||\n\t\t\t\tthis.props.index}`,\n\t\t\tcontent: this.props.step.label,\n\t\t\ttheme: this.props.isError ? 'error' : 'info',\n\t\t\ttriggerStyle: { display: !renderIcon ? 'flex' : '' },\n\t\t};\n\n\t\t// This is mainly for dev test purpose.\n\t\t// `isOpen` is only set to true if tooltip is specified to be open\n\t\t// Do not set isOpen to false or undefined otherwise, because that will\n\t\t// disable any interaction with tooltips\n\t\tif (this.props.tooltipIsOpen) {\n\t\t\ttooltipProps.isOpen = true;\n\t\t}\n\n\t\treturn (\n\t\t\t<li\n\t\t\t\tclassName={classNames('slds-progress__item', {\n\t\t\t\t\t'slds-is-completed': this.props.isCompleted,\n\t\t\t\t\t'slds-is-active': this.props.isSelected && !this.props.isError,\n\t\t\t\t\t'slds-has-error': this.props.isError,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<Tooltip {...tooltipProps}>\n\t\t\t\t\t{this.buttonIcon(renderIcon, status, this.props)}\n\t\t\t\t</Tooltip>\n\t\t\t</li>\n\t\t);\n\t}\n}\n\nStep.propTypes = propTypes;\nStep.displayName = displayName;\n\nexport default Step; // export is replaced with `ReactDOM.render(<Example />, mountNode);` at runtime\n"],"file":"step.js"}