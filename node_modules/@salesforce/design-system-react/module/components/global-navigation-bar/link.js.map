{"version":3,"sources":["../../../.tmp-es/components/global-navigation-bar/link.jsx"],"names":["React","PropTypes","classNames","isFunction","GLOBAL_NAVIGATION_BAR_LINK","handleClick","event","href","onClick","preventDefault","GlobalNavigationBarLink","props","active","activeBackgroundColor","className","dividerPosition","id","label","onBlur","onFocus","onKeyDown","onKeyPress","tabIndex","listItemstyle","backgroundColor","borderBottomColor","displayName","propTypes","bool","string","oneOfType","array","object","oneOf","func","onKeyUp","onMouseEnter","onMouseLeave","defaultProps"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// # GlobalNavigationBar Link Component\n\n// ## Dependencies\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ### isFunction\nimport isFunction from 'lodash.isfunction';\n\n// ## Constants\nimport { GLOBAL_NAVIGATION_BAR_LINK } from '../../utilities/constants';\n\nfunction handleClick (event, href, onClick) {\n\tevent.preventDefault();\n\n\tonClick(event, { href });\n}\n\n/**\n * Wraps a link in the proper markup to support use in the GlobalNavigationBar.\n */\nconst GlobalNavigationBarLink = (props) => {\n\t// Separate props we care about in order to pass others along passively to the `a` tag\n\tconst {\n\t\tactive,\n\t\tactiveBackgroundColor,\n\t\tclassName,\n\t\tdividerPosition,\n\t\thref,\n\t\tid,\n\t\tlabel,\n\t\tonBlur,\n\t\tonClick,\n\t\tonFocus,\n\t\tonKeyDown,\n\t\tonKeyPress,\n\t\ttabIndex,\n\t} = props;\n\n\tconst listItemstyle = active\n\t\t? {\n\t\t\tbackgroundColor: activeBackgroundColor,\n\t\t\tborderBottomColor: activeBackgroundColor,\n\t\t}\n\t\t: null;\n\n\treturn (\n\t\t<li\n\t\t\tclassName={classNames('slds-context-bar__item', {\n\t\t\t\t'slds-is-active': active,\n\t\t\t\t[`slds-context-bar__item--divider-${dividerPosition}`]: dividerPosition,\n\t\t\t})}\n\t\t\tid={id}\n\t\t\tstyle={listItemstyle}\n\t\t>\n\t\t\t<a\n\t\t\t\thref={href}\n\t\t\t\tclassName={classNames('slds-context-bar__label-action', className)}\n\t\t\t\tonBlur={onBlur}\n\t\t\t\tonClick={\n\t\t\t\t\tisFunction(onClick)\n\t\t\t\t\t\t? (event) => handleClick(event, href, onClick)\n\t\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t\tonFocus={onFocus}\n\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\tonKeyPress={onKeyPress}\n\t\t\t\ttabIndex={tabIndex}\n\t\t\t>\n\t\t\t\t<span className=\"slds-truncate\">{label}</span>\n\t\t\t</a>\n\t\t</li>\n\t);\n};\n\nGlobalNavigationBarLink.displayName = GLOBAL_NAVIGATION_BAR_LINK;\n\n// ### Prop Types\nGlobalNavigationBarLink.propTypes = {\n\t/**\n\t * Whether the item is active or not.\n\t */\n\tactive: PropTypes.bool,\n\t/**\n\t * Allows alignment of active item with active application background color. If application background is dark, text color may need to be `#fff`. This can be done with the style prop.\n\t */\n\tactiveBackgroundColor: PropTypes.string,\n\t/**\n\t * Class names to be added to the anchor element\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Determines position of separating bar.\n\t */\n\tdividerPosition: PropTypes.oneOf(['left', 'right']),\n\t/**\n\t * The `href` attribute of the link. Please pass in bookmarkable URLs from your routing library. Use `GlobalNavigationBarButton` if a \"real URL\" is not desired. If the `onClick` callback is specified this URL will still be prevented from changing the browser's location.\n\t */\n\thref: PropTypes.string,\n\t/**\n\t * The `id` attribute is applied to the `li` tag. _This was recently changed from being on the anchor tag._\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * Text to show for link item.\n\t */\n\tlabel: PropTypes.string,\n\t/**\n\t * Triggered when focus is removed.\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * `function (event, href)` - fires when the link is clicked. If set, the browser location change to the `href` specified will be ignored, but the `href` will be included in an additional parameter passed to the callback.\n\t */\n\tonClick: PropTypes.func,\n\t/**\n\t * Triggered when component is focused.\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Triggered when a key is pressed down\n\t */\n\tonKeyDown: PropTypes.func,\n\t/**\n\t * Triggered when a key is pressed and released\n\t */\n\tonKeyPress: PropTypes.func,\n\t/**\n\t * Triggered when a key is released\n\t */\n\tonKeyUp: PropTypes.func,\n\t/**\n\t * Triggered when a mouse arrow hovers\n\t */\n\tonMouseEnter: PropTypes.func,\n\t/**\n\t * Triggered when a mouse arrow no longer hovers\n\t */\n\tonMouseLeave: PropTypes.func,\n\t/**\n\t * Write \"-1\" if you don't want the user to tab to the button.\n\t */\n\ttabIndex: PropTypes.string,\n};\n\nGlobalNavigationBarLink.defaultProps = {\n\thref: 'javascript:void(0);', // eslint-disable-line no-script-url\n};\n\nexport default GlobalNavigationBarLink;\n"],"file":"link.js"}