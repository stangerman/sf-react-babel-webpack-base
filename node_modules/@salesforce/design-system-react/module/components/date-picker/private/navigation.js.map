{"version":3,"sources":["../../../../.tmp-es/components/date-picker/private/navigation.jsx"],"names":["React","createReactClass","PropTypes","YearPicklist","Button","DateUtil","DatepickerMonthNavigation","displayName","propTypes","assistiveTextNextMonth","string","isRequired","assistiveTextPreviousMonth","id","initialDateForCalendarRender","instanceOf","Date","onChangeMonth","func","monthLabels","array","onPreviousMonthKeyDown","previousMonthRef","relativeYearFrom","number","relativeYearTo","getMonthLabel","props","getMonth","getYearLabel","getFullYear","handleClick","event","preventDefault","stopPropagation","handleYearSelect","undefined","previousMonthClicked","addMonths","nextMonthClicked","render","icon","component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport createReactClass from 'create-react-class';\nimport PropTypes from 'prop-types';\nimport YearPicklist from './year-picklist';\nimport Button from '../../button';\n\nimport DateUtil from '../../../utilities/date';\n\nconst DatepickerMonthNavigation = createReactClass({\n\tdisplayName: 'SLDSDatepickerMonthNavigation',\n\n\tpropTypes: {\n\t\t/**\n\t\t * Label for button to go to the next month\n\t\t */\n\t\tassistiveTextNextMonth: PropTypes.string.isRequired,\n\t\t/**\n\t\t * Label for button to go to the previous month\n\t\t */\n\t\tassistiveTextPreviousMonth: PropTypes.string.isRequired,\n\t\t/**\n\t\t * HTML id for component\n\t\t */\n\t\tid: PropTypes.string,\n\t\t/**\n\t\t * Date used to create calendar that is displayed. This is typically the initial day focused when using the keyboard navigation. Focus will be set to this date if available.\n\t\t */\n\t\tinitialDateForCalendarRender: PropTypes.instanceOf(Date).isRequired,\n\t\t/**\n\t\t * Displayed calendar has changed or re-rendered\n\t\t */\n\t\tonChangeMonth: PropTypes.func.isRequired,\n\t\t/**\n\t\t * Names of the months\n\t\t */\n\t\tmonthLabels: PropTypes.array.isRequired,\n\t\t/**\n\t\t * For keyboard navigation. In order to trap focus within the dialog, the first DOM node with a tab index should be listened to.\n\t\t */\n\t\tonPreviousMonthKeyDown: PropTypes.func,\n\t\t/**\n\t\t * Callback that passes in the DOM reference of the `<button>` DOM node within this component. Primary use is to allow `focus` to be called. You should still test if the node exists, since rendering is asynchronous.\n\t\t */\n\t\tpreviousMonthRef: PropTypes.func.isRequired,\n\t\t/**\n\t\t * Offset of year from current year that can be selected in the year selection dropdown. (2017 - 5 = 2012).\n\t\t */\n\t\trelativeYearFrom: PropTypes.number,\n\t\t/**\n\t\t * Offset of year from current year that can be selected in the year selection dropdown. (2017 + 5 = 2012).\n\t\t */\n\t\trelativeYearTo: PropTypes.number,\n\t},\n\n\tgetMonthLabel () {\n\t\treturn this.props.monthLabels[\n\t\t\tnew Date(this.props.initialDateForCalendarRender).getMonth()\n\t\t];\n\t},\n\n\tgetYearLabel () {\n\t\treturn new Date(this.props.initialDateForCalendarRender).getFullYear();\n\t},\n\n\thandleClick (event) {\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\t},\n\n\thandleYearSelect (initialDateForCalendarRender) {\n\t\tthis.props.onChangeMonth(undefined, initialDateForCalendarRender);\n\t},\n\n\tpreviousMonthClicked () {\n\t\tthis.props.onChangeMonth(\n\t\t\tundefined,\n\t\t\tDateUtil.addMonths(this.props.initialDateForCalendarRender, -1)\n\t\t);\n\t},\n\n\tnextMonthClicked () {\n\t\tthis.props.onChangeMonth(\n\t\t\tundefined,\n\t\t\tDateUtil.addMonths(this.props.initialDateForCalendarRender, 1)\n\t\t);\n\t},\n\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"slds-datepicker__filter slds-grid\">\n\t\t\t\t<div className=\"slds-datepicker__filter--month slds-grid slds-grid--align-spread slds-grow\">\n\t\t\t\t\t<div className=\"slds-align-middle\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tassistiveText={{ icon: this.props.assistiveTextPreviousMonth }}\n\t\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\t\ticonName=\"left\"\n\t\t\t\t\t\t\ticonVariant=\"container\"\n\t\t\t\t\t\t\tonKeyDown={this.props.onPreviousMonthKeyDown}\n\t\t\t\t\t\t\tonClick={this.previousMonthClicked}\n\t\t\t\t\t\t\tbuttonRef={(component) => {\n\t\t\t\t\t\t\t\tthis.props.previousMonthRef(component);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h2\n\t\t\t\t\t\tid={`${this.props.id}-month`}\n\t\t\t\t\t\tclassName=\"slds-align-middle\"\n\t\t\t\t\t\taria-live=\"assertive\"\n\t\t\t\t\t\taria-atomic\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.getMonthLabel()}{' '}\n\t\t\t\t\t\t<span className=\"slds-assistive-text\">{this.getYearLabel()}</span>\n\t\t\t\t\t</h2>\n\t\t\t\t\t<div className=\"slds-align-middle\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tassistiveText={{ icon: this.props.assistiveTextNextMonth }}\n\t\t\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\t\t\ticonName=\"right\"\n\t\t\t\t\t\t\ticonVariant=\"container\"\n\t\t\t\t\t\t\tonClick={this.nextMonthClicked}\n\t\t\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<YearPicklist\n\t\t\t\t\tid={this.props.id}\n\t\t\t\t\tinitialDateForCalendarRender={this.props.initialDateForCalendarRender}\n\t\t\t\t\tonChangeMonth={this.handleYearSelect}\n\t\t\t\t\trelativeYearFrom={this.props.relativeYearFrom}\n\t\t\t\t\trelativeYearTo={this.props.relativeYearTo}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t},\n});\n\nexport default DatepickerMonthNavigation;\n"],"file":"navigation.js"}