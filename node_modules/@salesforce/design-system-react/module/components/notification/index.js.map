{"version":3,"sources":["../../../.tmp-es/components/notification/index.jsx"],"names":["React","PropTypes","classNames","Button","Icon","checkProps","displayName","propTypes","iconCategory","string","className","content","node","isRequired","dismissible","bool","duration","number","iconName","isOpen","onDismiss","func","texture","theme","oneOf","variant","defaultProps","Notification","props","timeout","clearTimeout","state","returnFocusTo","focus","setTimeout","nextProps","setState","document","activeElement","prevProps","btn","dismissBtnRef","renderIcon","size","icon","dismissBtn","renderClose","renderToastContent","renderAlertContent","classes","styles","width","left","transform","alertStyles","display","getClassName","renderContent","blankContent","Component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport Button from '../button';\nimport Icon from '../icon';\nimport checkProps from './check-props';\n\nconst displayName = 'Notification';\nconst propTypes = {\n\ticonCategory: PropTypes.string,\n\t/**\n\t * Custom classes applied to Notification element.\n\t */\n\tclassName: PropTypes.string,\n\t/**\n\t * Message for Notification.\n\t */\n\tcontent: PropTypes.node.isRequired,\n\t/**\n\t * If true, close button appears for users to dismiss Notification.\n\t */\n\tdismissible: PropTypes.bool,\n\t/**\n\t * If duration exists, the Notification will disappear after that amount of time.\n\t */\n\tduration: PropTypes.number,\n\t/**\n\t * Name of the icon. Visit <a href='http://www.lightningdesignsystem.com/resources/icons'>Lighning Design System Icons</a> to reference icon names.\n\t */\n\ticonName: PropTypes.string,\n\tisOpen: PropTypes.bool.isRequired,\n\tonDismiss: PropTypes.func,\n\t/**\n\t * Styling for Notification background.\n\t */\n\ttexture: PropTypes.bool,\n\t/**\n\t * Styling for Notification background color. Please reference <a href='http://www.lightningdesignsystem.com/components/utilities/themes/#color'>Lighning Design System Themes > Color</a>.\n\t */\n\ttheme: PropTypes.oneOf(['success', 'warning', 'error', 'offline']),\n\tvariant: PropTypes.oneOf(['alert', 'toast']).isRequired,\n};\n\nconst defaultProps = {\n\ticonCategory: 'utility',\n\tdismissible: true,\n\tisOpen: false,\n\ttexture: false,\n};\n\n/**\n * The Notification component is the Alert and Toast variants of the Lightning Design System Notification component. For prompt notifications, use the <a href='#/modal'>Modal</a> component with <code>prompt={true}</code>.\n * The Notification opens from a state change outside of the component itself (pass this state to the <code>isOpen</code> prop).\n */\nclass Notification extends React.Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {};\n\t\tthis.timeout = null;\n\t}\n\n\tcomponentDidMount () {\n\t\tcheckProps('Notification', this.props);\n\n\t\tif (this.props.duration) {\n\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\tthis.onDismiss();\n\t\t\t}, this.props.duration);\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\t\tif (nextProps.duration) {\n\t\t\tif (this.timeout) {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t}\n\t\t\tif (nextProps.isOpen) {\n\t\t\t\tthis.timeout = setTimeout(() => {\n\t\t\t\t\tthis.onDismiss();\n\t\t\t\t}, this.props.duration);\n\t\t\t}\n\t\t}\n\t\tif (nextProps.isOpen !== this.props.isOpen) {\n\t\t\tthis.setState({ returnFocusTo: document.activeElement });\n\t\t}\n\t}\n\n\tcomponentDidUpdate (prevProps) {\n\t\tif (prevProps.isOpen !== this.props.isOpen) {\n\t\t\tconst btn = this.dismissBtnRef;\n\t\t\tif (btn) btn.focus();\n\t\t}\n\t}\n\n\tonDismiss = () => {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\n\t\tif (this.props.onDismiss) this.props.onDismiss();\n\t\tif (this.state.returnFocusTo && this.state.returnFocusTo.focus) {\n\t\t\tthis.state.returnFocusTo.focus();\n\t\t}\n\t};\n\n\tgetClassName () {\n\t\treturn classNames(this.props.className, 'slds-notify', {\n\t\t\t[`slds-notify--${this.props.variant}`]: this.props.variant,\n\t\t\t[`slds-theme--${this.props.theme}`]: this.props.theme,\n\t\t\t'slds-theme--alert-texture': this.props.texture,\n\t\t});\n\t}\n\n\t/*\n\t * The parent container with role='alert' only announces its content if there is a change inside of it.\n\t * Because React renders the entire element to the DOM, we must switch out a blank div for the real content.\n\t * Bummer, I know.\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tblankContent () {\n\t\treturn <div />;\n\t}\n\n\trenderAlertContent () {\n\t\treturn (\n\t\t\t<h2 id=\"dialogTitle\">\n\t\t\t\t{this.renderIcon()}\n\t\t\t\t{this.props.content}\n\t\t\t</h2>\n\t\t);\n\t}\n\n\trenderClose () {\n\t\tif (this.props.dismissible) {\n\t\t\tlet size = null;\n\t\t\tif (this.props.variant === 'toast') size = 'large';\n\n\t\t\t// i18n\n\t\t\treturn (\n\t\t\t\t<Button\n\t\t\t\t\tassistiveText={{ icon: 'Dismiss Notification' }}\n\t\t\t\t\ticonCategory=\"utility\"\n\t\t\t\t\ticonName=\"close\"\n\t\t\t\t\ticonSize={size}\n\t\t\t\t\tinverse\n\t\t\t\t\tclassName=\"slds-notify__close\"\n\t\t\t\t\tonClick={this.onDismiss}\n\t\t\t\t\tbuttonRef={(dismissBtn) => {\n\t\t\t\t\t\tthis.dismissBtnRef = dismissBtn;\n\t\t\t\t\t}}\n\t\t\t\t\tvariant=\"icon\"\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trenderContent () {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span className=\"slds-assistive-text\">{this.props.theme}</span>\n\t\t\t\t{this.renderClose()}\n\t\t\t\t{this.props.variant === 'toast' ? this.renderToastContent() : null}\n\t\t\t\t{this.props.variant === 'alert' ? this.renderAlertContent() : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderIcon () {\n\t\tif (this.props.iconName) {\n\t\t\tlet classes = '';\n\n\t\t\tif (this.props.variant === 'alert') {\n\t\t\t\tclasses = 'slds-m-right--x-small';\n\t\t\t} else if (this.props.variant === 'toast') {\n\t\t\t\tclasses = 'slds-m-right--small slds-col slds-no-flex';\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<Icon\n\t\t\t\t\tcategory={this.props.iconCategory}\n\t\t\t\t\tclassName={classes}\n\t\t\t\t\tinverse\n\t\t\t\t\tname={this.props.iconName}\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\trenderToastContent () {\n\t\treturn (\n\t\t\t<section className=\"notify__content slds-grid\">\n\t\t\t\t{this.renderIcon()}\n\t\t\t\t<div className=\"slds-col slds-align-middle\">\n\t\t\t\t\t<h2 id=\"dialogTitle\" className=\"slds-text-heading--small\">\n\t\t\t\t\t\t{this.props.content}\n\t\t\t\t\t</h2>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t);\n\t}\n\n\trender () {\n\t\t// TODO: If there are multiple notifications on a page, we must 'hide' the ones that aren't open.\n\t\t// Need to find a better way to do this than using width:0 to override slds-notify-container.\n\t\tlet styles;\n\t\tif (!this.props.isOpen) {\n\t\t\tstyles = { width: '0px' };\n\t\t} else {\n\t\t\tstyles =\n\t\t\t\tthis.props.variant === 'toast'\n\t\t\t\t\t? { width: 'auto', left: '50%', transform: 'translateX(-50%)' }\n\t\t\t\t\t: { width: '100%' };\n\t\t}\n\n\t\tconst alertStyles = !this.props.isOpen ? { display: 'none' } : null;\n\t\treturn (\n\t\t\t<div className=\"slds-notify-container\" style={styles}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={this.getClassName()}\n\t\t\t\t\trole=\"alertdialog\"\n\t\t\t\t\taria-labelledby=\"dialogTitle\"\n\t\t\t\t\tstyle={alertStyles}\n\t\t\t\t>\n\t\t\t\t\t{this.props.isOpen ? this.renderContent() : this.blankContent()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nNotification.displayName = displayName;\nNotification.propTypes = propTypes;\nNotification.defaultProps = defaultProps;\n\nexport default Notification;\n"],"file":"index.js"}