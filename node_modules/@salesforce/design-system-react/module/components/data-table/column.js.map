{"version":3,"sources":["../../../.tmp-es/components/data-table/column.jsx"],"names":["React","PropTypes","DATA_TABLE_COLUMN","DataTableColumn","Component","displayName","propTypes","children","element","isSorted","bool","label","oneOfType","string","node","primaryColumn","property","sortable","sortDirection","oneOf","title","truncate","width"],"mappings":";;;;;;;;;;AAAA;;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,SAASC,iBAAT,QAAkC,2BAAlC,C,CAEA;;AAEA;;;;IAGMC,e;;;;;;;;;;;;EAAwBH,MAAMI,S,GAEpC;AACA;;;AACAD,gBAAgBE,WAAhB,GAA8BH,iBAA9B,C,CAEA;;AACAC,gBAAgBG,SAAhB,GAA4B;AAC3B;;;;;;;;;;;;;;;;;;;;AAoBAC,YAAUN,UAAUO,OArBO;;AAsB3B;;;AAGAC,YAAUR,UAAUS,IAzBO;;AA0B3B;;;AAGAC,SAAOV,UAAUW,SAAV,CAAoB,CAACX,UAAUY,MAAX,EAAmBZ,UAAUa,IAA7B,CAApB,CA7BoB;;AA8B3B;;;AAGAC,iBAAed,UAAUS,IAjCE;;AAkC3B;;;AAGAM,YAAUf,UAAUY,MArCO;;AAsC3B;;;AAGAI,YAAUhB,UAAUS,IAzCO;;AA0C3B;;;AAGAQ,iBAAejB,UAAUkB,KAAV,CAAgB,CAAC,MAAD,EAAS,KAAT,CAAhB,CA7CY;;AA8C3B;;;AAGAC,SAAOnB,UAAUY,MAjDU;;AAkD3B;;;AAGAQ,YAAUpB,UAAUS,IArDO;;AAsD3B;;;AAGAY,SAAOrB,UAAUY;AAzDU,CAA5B;AA4DA,eAAeV,eAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ## Constants\nimport { DATA_TABLE_COLUMN } from '../../utilities/constants';\n\n// extends is used below so that react-docgen can detect the component\n\n/**\n * Columns define the structure of the data displayed in the DataTable.\n */\nclass DataTableColumn extends React.Component {}\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nDataTableColumn.displayName = DATA_TABLE_COLUMN;\n\n// ### Prop Types\nDataTableColumn.propTypes = {\n\t/**\n\t * Use a _higher-order component_ to customize a data table cell that will override the default cell rendering. `CustomDataTableCell` must have the same `displayName` as `DataTableCell` or it will be ignored. If you want complete control of the HTML, including the wrapping `td`, you don't have to use `DataTableCell`.\n\t * ```\n\t * import DataTableCell from 'design-system-react/data-table/cell';\n\t * const CustomDataTableCell = ({ children, ...props }) => (\n\t *   <DataTableCell {...props} >\n\t *     <a href=\"javascript:void(0);\">{children}</a>\n\t *   </DataTableCell>\n\t * );\n\t * CustomDataTableCell.displayName = DataTableCell.displayName;\n\t *\n\t * <DataTable>\n\t *   <DataTableColumn />\n\t *   <DataTableColumn>\n\t *     <DataTableCustomCell />\n\t *   </DataTableColumn>\n\t *   <DataTableRowActions />\n\t * </DataTable>\n\t * ```\n\t */\n\tchildren: PropTypes.element,\n\t/**\n\t * Selects this column as the currently sorted column.\n\t */\n\tisSorted: PropTypes.bool,\n\t/**\n\t * The column label. If a `string` is not passed in, no `title` attribute will be rendered.\n\t */\n\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n\t/**\n\t * The primary column for a row. This is almost always the first column.\n\t */\n\tprimaryColumn: PropTypes.bool,\n\t/**\n\t * The property which corresponds to this column.\n\t */\n\tproperty: PropTypes.string,\n\t/**\n\t * Whether or not the column is sortable.\n\t */\n\tsortable: PropTypes.bool,\n\t/**\n\t * The current sort direction. If left out the component will track this internally. Required if `isSorted` is true.\n\t */\n\tsortDirection: PropTypes.oneOf(['desc', 'asc']),\n\t/**\n\t * Title used for truncation div within the cell.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Adds truncate to cell node.\n\t */\n\ttruncate: PropTypes.bool,\n\t/**\n\t * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n\t */\n\twidth: PropTypes.string,\n};\n\nexport default DataTableColumn;\n"],"file":"column.js"}