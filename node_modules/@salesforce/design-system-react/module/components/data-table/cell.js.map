{"version":3,"sources":["../../../.tmp-es/components/data-table/cell.jsx"],"names":["React","PropTypes","classNames","DATA_TABLE_CELL","DataTableCell","props","childText","isValidElement","children","contents","fixedLayout","title","cell","className","width","primaryColumn","displayName","propTypes","oneOfType","node","string","array","object","bool","item","property"],"mappings":"AAAA;;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,eAAT,QAAgC,2BAAhC;AAEA;;;;AAGA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAChC,MAAMC,YAAYN,MAAMO,cAAN,CAAqBF,MAAMG,QAA3B,IACfH,MAAMG,QAAN,CAAeH,KAAf,CAAqBG,QADN,GAEfH,MAAMG,QAFT;AAGA,MAAMC,WACL;AACC,eAAWP,WAAW;AACrB,uBAAiBG,MAAMK;AADF,KAAX,CADZ;AAIC,WAAOL,MAAMM,KAAN,IAAeL;AAJvB,KAMED,MAAMG,QANR,CADD;AAWA,MAAII,OACH;AACC,eAAWP,MAAMQ,SADlB;AAEC,UAAMR,MAAMK,WAAN,GAAoB,UAApB,GAAiC,IAFxC;AAGC,WAAOL,MAAMS,KAAN,GAAc;AAAEA,aAAOT,MAAMS;AAAf,KAAd,GAAuC;AAH/C,KAKEL,QALF,CADD;;AAUA,MAAIJ,MAAMU,aAAV,EAAyB;AACxBH,WACC;AACC,iBAAWP,MAAMQ,SADlB;AAEC,YAAMR,MAAMK,WAAN,GAAoB,UAApB,GAAiC,IAFxC;AAGC,aAAOL,MAAMS,KAAN,GAAc;AAAEA,eAAOT,MAAMS;AAAf,OAAd,GAAuC;AAH/C,OAKEL,QALF,CADD;AASA;;AAED,SAAOG,IAAP;AACA,CAtCD,C,CAwCA;AACA;;;AACAR,cAAcY,WAAd,GAA4Bb,eAA5B,C,CAEA;;AACAC,cAAca,SAAd,GAA0B;AACzB;;;AAGAT,YAAUP,UAAUiB,SAAV,CAAoB,CAACjB,UAAUkB,IAAX,EAAiBlB,UAAUmB,MAA3B,CAApB,CAJe;;AAKzB;;;AAGAP,aAAWZ,UAAUiB,SAAV,CAAoB,CAC9BjB,UAAUoB,KADoB,EAE9BpB,UAAUqB,MAFoB,EAG9BrB,UAAUmB,MAHoB,CAApB,CARc;;AAazB;;;AAGAV,eAAaT,UAAUsB,IAhBE;;AAiBzB;;;AAGAC,QAAMvB,UAAUqB,MApBS;;AAqBzB;;;AAGAP,iBAAed,UAAUsB,IAxBA;;AAyBzB;;;AAGAE,YAAUxB,UAAUmB,MA5BK;;AA6BzB;;;AAGAT,SAAOV,UAAUmB,MAhCQ;;AAiCzB;;;AAGAN,SAAOb,UAAUmB;AApCQ,CAA1B;AAuCA,eAAehB,aAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// ### classNames\nimport classNames from 'classnames';\n\n// ## Constants\nimport { DATA_TABLE_CELL } from '../../utilities/constants';\n\n/**\n * The default Cell renderer for the DataTable. Pass in any React component with the same `displayName` which takes the same props to provide custom rendering.\n */\nconst DataTableCell = (props) => {\n\tconst childText = React.isValidElement(props.children)\n\t\t? props.children.props.children\n\t\t: props.children;\n\tconst contents = (\n\t\t<div\n\t\t\tclassName={classNames({\n\t\t\t\t'slds-truncate': props.fixedLayout,\n\t\t\t})}\n\t\t\ttitle={props.title || childText}\n\t\t>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n\n\tlet cell = (\n\t\t<td\n\t\t\tclassName={props.className}\n\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t>\n\t\t\t{contents}\n\t\t</td>\n\t);\n\n\tif (props.primaryColumn) {\n\t\tcell = (\n\t\t\t<th\n\t\t\t\tclassName={props.className}\n\t\t\t\trole={props.fixedLayout ? 'gridcell' : null}\n\t\t\t\tstyle={props.width ? { width: props.width } : null}\n\t\t\t>\n\t\t\t\t{contents}\n\t\t\t</th>\n\t\t);\n\t}\n\n\treturn cell;\n};\n\n// ### Display Name\n// Always use the canonical component name as the React display name.\nDataTableCell.displayName = DATA_TABLE_CELL;\n\n// ### Prop Types\nDataTableCell.propTypes = {\n\t/**\n\t * The contents of the cell. This can be simple text or DOM nodes. Equivalent to `props.item[props.property]`\n\t */\n\tchildren: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Class names to be added to the cell.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Use this if you are creating an advanced table (selectable, sortable, or resizable rows)\n\t */\n\tfixedLayout: PropTypes.bool,\n\t/**\n\t * The item from the items which represents this row.\n\t */\n\titem: PropTypes.object,\n\t/**\n\t * The primary column for a row. This is almost always the first column.\n\t */\n\tprimaryColumn: PropTypes.bool,\n\t/**\n\t * The property of this item to display.\n\t */\n\tproperty: PropTypes.string,\n\t/**\n\t * Shows on hover. Useful for truncated cells.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Width of column. This is required for advanced/fixed layout tables. Please provide units. (`rems` are recommended)\n\t */\n\twidth: PropTypes.string,\n};\n\nexport default DataTableCell;\n"],"file":"cell.js"}