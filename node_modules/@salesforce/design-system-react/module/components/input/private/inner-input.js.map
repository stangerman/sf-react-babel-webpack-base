{"version":3,"sources":["../../../../.tmp-es/components/input/private/inner-input.jsx"],"names":["React","PropTypes","classNames","Spinner","propTypes","string","bool","assistiveText","shape","spinner","autoComplete","className","oneOfType","array","object","containerClassName","containerProps","disabled","fixedTextLeft","node","fixedTextRight","hasSpinner","iconLeft","iconRight","id","isRequired","inputRef","func","isStatic","label","onBlur","onChange","onClick","onFocus","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onSelect","onSubmit","placeholder","minLength","maxLength","name","readOnly","required","role","style","tabIndex","type","oneOf","value","defaultValue","defaultProps","InnerInput","props","inlineEditTrigger","displayName"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/* eslint-disable jsx-a11y/aria-activedescendant-has-tabindex */\n\n// ### React\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport Spinner from '../../../components/spinner';\n\nconst propTypes = {\n\t'aria-activedescendant': PropTypes.string,\n\t'aria-autocomplete': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a select box\n\t * that shows or hides a panel.\n\t */\n\t'aria-controls': PropTypes.string,\n\t'aria-describedby': PropTypes.string,\n\t'aria-expanded': PropTypes.bool,\n\t'aria-haspopup': PropTypes.bool,\n\t'aria-labelledby': PropTypes.string,\n\t/**\n\t * An HTML ID that is shared with ARIA-supported devices with the\n\t * `aria-controls` attribute in order to relate the input with\n\t * another region of the page. An example would be a search field\n\t * that shows search results.\n\t */\n\t'aria-owns': PropTypes.string,\n\t'aria-required': PropTypes.bool,\n\t/**\n\t * **Assistive text for accessibility.**\n\t * This object is merged with the default props object on every render.\n\t * * `spinner`: Assistive text on the spinner.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\tspinner: PropTypes.string,\n\t}),\n\t/**\n\t * Disabled brower's autocomplete when \"off\" is used.\n\t */\n\tautoComplete: PropTypes.string,\n\t/**\n\t * Class names to be added to the `input` element.\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Class names to be added to the outer container `div` of the input.\n\t */\n\tcontainerClassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Props to be added to the outer container `div` of the input (excluding `containerClassName`).\n\t */\n\tcontainerProps: PropTypes.object,\n\t/**\n\t * Disables the input and prevents editing the contents.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * Displays text or node to the left of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextLeft: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * Displays text or node to the right of the input. This follows the fixed text input UX pattern.\n\t */\n\tfixedTextRight: PropTypes.oneOfType([PropTypes.node, PropTypes.string]),\n\t/**\n\t * If true, loading spinner appears inside input on right hand side.\n\t */\n\thasSpinner: PropTypes.bool,\n\t/**\n\t * Left aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonLeft: PropTypes.node,\n\t/**\n\t * Right aligned icon, must be instance of `design-system-react/components/icon/input-icon`\n\t */\n\ticonRight: PropTypes.node,\n\t/**\n\t * Every input must have a unique ID in order to support keyboard navigation and ARIA support.\n\t */\n\tid: PropTypes.string.isRequired,\n\t/**\n\t * This callback exposes the input reference / DOM node to parent components. `<Parent inputRef={(inputComponent) => this.input = inputComponent} />\n\t */\n\tinputRef: PropTypes.func,\n\t/**\n\t * Displays the value of the input statically. This follows the static input UX pattern.\n\t */\n\tisStatic: PropTypes.bool,\n\t/**\n\t * This label appears above the input.\n\t */\n\tlabel: PropTypes.string,\n\tonBlur: PropTypes.func,\n\t/**\n\t * This callback fires when the input changes. The synthetic React event will be the first parameter to the callback. You will probably want to reference `event.target.value` in your callback. No custom data object is provided.\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * This event fires when the input is clicked.\n\t */\n\tonClick: PropTypes.func,\n\tonFocus: PropTypes.func,\n\tonInput: PropTypes.func,\n\tonInvalid: PropTypes.func,\n\tonKeyDown: PropTypes.func,\n\tonKeyPress: PropTypes.func,\n\tonKeyUp: PropTypes.func,\n\tonSelect: PropTypes.func,\n\tonSubmit: PropTypes.func,\n\t/**\n\t * Text that will appear in an empty input.\n\t */\n\tplaceholder: PropTypes.string,\n\tminLength: PropTypes.string,\n\tmaxLength: PropTypes.string,\n\t/**\n\t * Name of the submitted form parameter.\n\t */\n\tname: PropTypes.string,\n\t/**\n\t * Specifies `readOnly` for `input` node.\n\t */\n\treadOnly: PropTypes.bool,\n\t/**\n\t * Highlights the input as a required field (does not perform any validation).\n\t */\n\trequired: PropTypes.bool,\n\t/**\n\t * `role` to be added to `input` node\n\t */\n\trole: PropTypes.string,\n\t/**\n\t * Style object to be added to `input` node\n\t */\n\tstyle: PropTypes.object,\n\t/**\n\t * Specifies `tabIndex` for `input` node\n\t */\n\ttabIndex: PropTypes.string,\n\t/**\n\t * The `<Input>` element includes support for all HTML5 types.\n\t */\n\ttype: PropTypes.oneOf([\n\t\t'text',\n\t\t'password',\n\t\t'datetime',\n\t\t'datetime-local',\n\t\t'date',\n\t\t'month',\n\t\t'time',\n\t\t'week',\n\t\t'number',\n\t\t'email',\n\t\t'url',\n\t\t'search',\n\t\t'tel',\n\t\t'color',\n\t]),\n\t/**\n\t * The input is a controlled component, and will always display this value.\n\t */\n\tvalue: PropTypes.string,\n\t/**\n\t * This is the initial value of an uncontrolled form element and is present only to provide\n\t * compatibility with hybrid framework applications that are not entirely React. It should only\n\t * be used in an application without centralized state (Redux, Flux). \"Controlled components\"\n\t * with centralized state is highly recommended.\n\t * See [Code Overview](https://github.com/salesforce/design-system-react/blob/master/docs/codebase-overview.md#controlled-and-uncontrolled-components) for more information.\n\t */\n\tdefaultValue: PropTypes.string,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\tspinner: 'Loading ...',\n\t},\n\ttype: 'text',\n};\n\n/*\n * This component was created to allow the DIV wrapped input to be used within other components such as combobox. This components API is not public.\n */\nconst InnerInput = (props) => {\n\tconst {\n\t\tclassName: containerClassName,\n\t\t...containerProps\n\t} = props.containerProps;\n\n\tconst assistiveText = {\n\t\t...defaultProps.assistiveText,\n\t\t...props.assistiveText,\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={classNames(containerClassName, {\n\t\t\t\t'slds-input-has-icon': props.iconLeft || props.iconRight,\n\t\t\t\t'slds-input-has-icon_left': props.iconLeft && !props.iconRight,\n\t\t\t\t'slds-input-has-icon_right': !props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-icon_left-right': props.iconLeft && props.iconRight,\n\t\t\t\t'slds-input-has-fixed-addon':\n\t\t\t\t\tprops.fixedTextLeft || props.fixedTextRight,\n\t\t\t\t'slds-has-divider--bottom': props.isStatic,\n\t\t\t})}\n\t\t\t{...containerProps}\n\t\t>\n\t\t\t{props.iconLeft && props.iconLeft}\n\t\t\t{props.fixedTextLeft && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextLeft}</span>\n\t\t\t)}\n\n\t\t\t{!props.isStatic && (\n\t\t\t\t<input\n\t\t\t\t\taria-activedescendant={props['aria-activedescendant']}\n\t\t\t\t\taria-autocomplete={props['aria-autocomplete']}\n\t\t\t\t\taria-controls={props['aria-controls']}\n\t\t\t\t\taria-labelledby={props['aria-labelledby']}\n\t\t\t\t\taria-describedby={\n\t\t\t\t\t\tprops.hasSpinner\n\t\t\t\t\t\t\t? `loading-status-icon ${props['aria-describedby']}`\n\t\t\t\t\t\t\t: props['aria-describedby']\n\t\t\t\t\t}\n\t\t\t\t\taria-expanded={props['aria-expanded']}\n\t\t\t\t\taria-owns={props['aria-owns']}\n\t\t\t\t\taria-required={props['aria-required']}\n\t\t\t\t\tautoComplete={props.autoComplete}\n\t\t\t\t\tclassName={classNames('slds-input', props.className)}\n\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\tid={props.id}\n\t\t\t\t\tminLength={props.minLength}\n\t\t\t\t\tmaxLength={props.maxLength}\n\t\t\t\t\tname={props.name}\n\t\t\t\t\tonBlur={props.onBlur}\n\t\t\t\t\tonChange={props.onChange}\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t\tonFocus={props.onFocus}\n\t\t\t\t\tonInput={props.onInput}\n\t\t\t\t\tonInvalid={props.onInvalid}\n\t\t\t\t\tonKeyDown={props.onKeyDown}\n\t\t\t\t\tonKeyPress={props.onKeyPress}\n\t\t\t\t\tonKeyUp={props.onKeyUp}\n\t\t\t\t\tonSelect={props.onSelect}\n\t\t\t\t\tonSubmit={props.onSubmit}\n\t\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\t\treadOnly={props.readOnly}\n\t\t\t\t\tref={props.inputRef}\n\t\t\t\t\trequired={props.required}\n\t\t\t\t\trole={props.role}\n\t\t\t\t\tstyle={props.style}\n\t\t\t\t\ttabIndex={props.tabIndex}\n\t\t\t\t\ttype={props.type}\n\t\t\t\t\tvalue={props.value}\n\t\t\t\t\tdefaultValue={props.defaultValue}\n\t\t\t\t/>\n\t\t\t)}\n\n\t\t\t{props.hasSpinner ? (\n\t\t\t\t<div className=\"slds-input__icon-group slds-input__icon-group_right\">\n\t\t\t\t\t{props.hasSpinner && (\n\t\t\t\t\t\t<Spinner\n\t\t\t\t\t\t\tassistiveText={{ label: assistiveText.spinner }}\n\t\t\t\t\t\t\tid=\"loading-status-icon\"\n\t\t\t\t\t\t\tisInput\n\t\t\t\t\t\t\tsize=\"x-small\"\n\t\t\t\t\t\t\tvariant=\"brand\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t{props.iconRight && props.iconRight}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\tprops.iconRight && props.iconRight\n\t\t\t)}\n\n\t\t\t{props.fixedTextRight && (\n\t\t\t\t<span className=\"slds-form-element__addon\">{props.fixedTextRight}</span>\n\t\t\t)}\n\n\t\t\t{/* eslint-disable jsx-a11y/no-static-element-interactions */}\n\t\t\t{props.isStatic && (\n\t\t\t\t<span\n\t\t\t\t\tclassName=\"slds-form-element__static slds-grid slds-grid_align-spread\"\n\t\t\t\t\tonClick={props.onClick}\n\t\t\t\t>\n\t\t\t\t\t{props.value}\n\t\t\t\t\t{props.inlineEditTrigger}\n\t\t\t\t</span>\n\t\t\t)}\n\t\t\t{/* eslint-enable jsx-a11y/no-static-element-interactions */}\n\t\t</div>\n\t);\n};\n\nInnerInput.displayName = 'SLDSInnerInput';\nInnerInput.propTypes = propTypes;\nInnerInput.defaultProps = defaultProps;\n\nexport default InnerInput;\n"],"file":"inner-input.js"}