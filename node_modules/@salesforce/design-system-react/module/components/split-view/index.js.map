{"version":3,"sources":["../../../.tmp-es/components/split-view/index.jsx"],"names":["React","PropTypes","shortid","classNames","isBoolean","ToggleButton","TOGGLE_BUTTON_WIDTH","SPLIT_VIEW","propTypes","assistiveText","shape","toggleButtonOpen","string","toggleButtonClose","id","className","oneOfType","array","object","isOpen","bool","events","onClose","func","onOpen","master","arrayOf","element","isRequired","masterWidth","detail","defaultProps","SplitView","props","state","generatedId","generate","setIsOpen","nextProps","getId","setState","event","getMasterViewId","height","maxWidth","onClick","toggle","masterContent","marginLeft","Component"],"mappings":"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","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport classNames from 'classnames';\nimport isBoolean from 'lodash.isboolean';\n\nimport ToggleButton, { TOGGLE_BUTTON_WIDTH } from './private/toggle-button';\n\nimport { SPLIT_VIEW } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * **Assistive text for accessibility**\n\t * * `toggleButtonOpen`: The button used to open the split view.\n\t * * `toggleButtonClose`: The button used to close the split view.\n\t */\n\tassistiveText: PropTypes.shape({\n\t\ttoggleButtonOpen: PropTypes.string,\n\t\ttoggleButtonClose: PropTypes.string,\n\t}),\n\t/**\n\t * HTML Id for the component.\n\t */\n\tid: PropTypes.string,\n\t/**\n\t * CSS classes to be added to the root `div` tag. Uses `classNames` [API](https://github.com/JedWatson/classnames).\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * Sets the split view to be open or closed.\n\t */\n\tisOpen: PropTypes.bool,\n\t/**\n\t * Event Callbacks\n\t * * `onClose`: Triggered when the split view has closed.\n\t * * `onOpen`: Triggered when the split view has opened.\n\t */\n\tevents: PropTypes.shape({\n\t\tonClose: PropTypes.func,\n\t\tonOpen: PropTypes.func,\n\t}),\n\t/**\n\t * The React component that is rendered in the master section.\n\t * You need to pass in an array of elements in order for the scrolling to in the SplitViewList to work correctly.\n\t * React requires that you also supply a unique `key` for each element [React Lists and Keys](https://reactjs.org/docs/lists-and-keys.html#keys).\n\t */\n\tmaster: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n\t/**\n\t * The width of the master section.\n\t */\n\tmasterWidth: PropTypes.string,\n\t/**\n\t * The React component that is rendered in the detail section.\n\t */\n\tdetail: PropTypes.oneOfType([\n\t\tPropTypes.arrayOf(PropTypes.element),\n\t\tPropTypes.element,\n\t]).isRequired,\n};\n\nconst defaultProps = {\n\tassistiveText: {\n\t\ttoggleButtonOpen: 'Close split view',\n\t\ttoggleButtonClose: 'Open split view',\n\t},\n\tevents: {},\n\tmasterWidth: '20rem',\n};\n\n/**\n * Split view is used to navigate between records in a list while staying on the same screen.\n */\nclass SplitView extends React.Component {\n\tstatic displayName = SPLIT_VIEW;\n\tstatic propTypes = propTypes;\n\tstatic defaultProps = defaultProps;\n\n\tconstructor (props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisOpen: true,\n\t\t};\n\t}\n\n\tcomponentWillMount () {\n\t\tthis.generatedId = shortid.generate();\n\n\t\tthis.setIsOpen(this.props.isOpen);\n\t}\n\n\tcomponentWillReceiveProps (nextProps) {\n\t\tif (nextProps.isOpen !== this.props.isOpen) {\n\t\t\tthis.setIsOpen(nextProps.isOpen);\n\t\t}\n\t}\n\n\tgetId () {\n\t\treturn this.props.id || this.generatedId;\n\t}\n\n\tgetMasterViewId () {\n\t\treturn `master_view_${this.getId()}`;\n\t}\n\n\tsetIsOpen (isOpen) {\n\t\tif (isBoolean(isOpen)) {\n\t\t\tthis.setState({\n\t\t\t\tisOpen,\n\t\t\t});\n\t\t}\n\t}\n\n\ttoggle (event) {\n\t\tthis.setIsOpen(!this.state.isOpen);\n\n\t\tif (this.state.isOpen && this.props.events.onClose) {\n\t\t\tthis.props.events.onClose(event);\n\t\t} else if (!this.state.isOpen && this.props.events.onOpen) {\n\t\t\tthis.props.events.onOpen(event);\n\t\t}\n\t}\n\n\tmasterContent () {\n\t\treturn this.state.isOpen ? (\n\t\t\t<article\n\t\t\t\tid={this.getMasterViewId()}\n\t\t\t\tclassName=\"slds-split-view slds-grid slds-grid_vertical slds-grow slds-scrollable_none\"\n\t\t\t>\n\t\t\t\t{this.props.master}\n\t\t\t</article>\n\t\t) : null;\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={this.getId()}\n\t\t\t\tclassName={classNames('slds-grid', this.props.className)}\n\t\t\t\tstyle={{\n\t\t\t\t\theight: '100%',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmaxWidth: this.state.isOpen ? this.props.masterWidth : '0',\n\t\t\t\t\t}}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'slds-split-view_container',\n\t\t\t\t\t\t{ 'slds-is-open': this.state.isOpen },\n\t\t\t\t\t\t{ 'slds-is-closed': !this.state.isOpen }\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t<ToggleButton\n\t\t\t\t\t\tassistiveText={this.props.assistiveText}\n\t\t\t\t\t\tariaControls={this.getMasterViewId()}\n\t\t\t\t\t\tisOpen={this.state.isOpen}\n\t\t\t\t\t\tevents={{\n\t\t\t\t\t\t\tonClick: (event) => this.toggle(event),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t{this.masterContent()}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tmarginLeft: TOGGLE_BUTTON_WIDTH,\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"slds-grow slds-scrollable_y\"\n\t\t\t\t>\n\t\t\t\t\t{this.props.detail}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SplitView;\n"],"file":"index.js"}