{"version":3,"sources":["../../../.tmp-es/components/accordion/index.jsx"],"names":["React","Component","PropTypes","classNames","shortid","ACCORDION","propTypes","className","oneOfType","array","object","string","id","number","children","node","isRequired","Accordion","generatedId","generate","props","displayName"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;AAEA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SAASC,SAAT,QAA0B,2BAA1B;AAEA,IAAMC,YAAY;AACjB;;;AAGAC,aAAWL,UAAUM,SAAV,CAAoB,CAC9BN,UAAUO,KADoB,EAE9BP,UAAUQ,MAFoB,EAG9BR,UAAUS,MAHoB,CAApB,CAJM;;AASjB;;;AAGAC,MAAIV,UAAUM,SAAV,CAAoB,CAACN,UAAUW,MAAX,EAAmBX,UAAUS,MAA7B,CAApB,CAZa;;AAajB;;;;;;;;;;;;AAYAG,YAAUZ,UAAUa,IAAV,CAAeC;AAzBR,CAAlB;AA4BA;;;;;IAIMC,S;;;;;;;;;;;;;yCACiB;AACrB,WAAKC,WAAL,GAAmBd,QAAQe,QAAR,EAAnB;AACA;;;6BAES;AACT,aACC;AACC,cAAM,KAAKC,KAAL,CAAWR,EAAX,IAAiB,KAAKM,WAD7B;AAEC,mBAAWf,WAAW,gBAAX,EAA6B,KAAKiB,KAAL,CAAWb,SAAxC;AAFZ,SAIE,KAAKa,KAAL,CAAWN,QAJb,CADD;AAQA;;;;EAdsBb,S;;AAiBxBgB,UAAUI,WAAV,GAAwBhB,SAAxB;AACAY,UAAUX,SAAV,GAAsBA,SAAtB;AAEA,eAAeW,SAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n// Implements the [Accordion design\n// pattern](https://www.lightningdesignsystem.com/components/accordion/) in\n// React. Based on SLDS v2.4.3\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport shortid from 'shortid';\n\nimport { ACCORDION } from '../../utilities/constants';\n\nconst propTypes = {\n\t/**\n\t * CSS class names to be added to the accordion component. _Tested with snapshot testing._\n\t */\n\tclassName: PropTypes.oneOfType([\n\t\tPropTypes.array,\n\t\tPropTypes.object,\n\t\tPropTypes.string,\n\t]),\n\t/**\n\t * HTML id for accordion component. _Tested with snapshot testing._\n\t */\n\tid: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\t/**\n\t * The panel content for the Accordion component. Accordion panels should be added as <AccordionPanel />. Event handler for the accordion panels should be added to `<AccordionPanel />`. Optional `panelContentActions` component may be passed as prop. _Tested with Mocha framework and snapshot testing._\n\t *\n\t * Example:\n\t * ```\n\t * <SLDSAccordion>\n\t *   <SLDSAccordionpanel />\n\t *   <SLDSAccordionpanel />\n\t *   <SLDSAccordionpanel />\n\t * </SLDSAccordion>\n\t * ```\n\t */\n\tchildren: PropTypes.node.isRequired,\n};\n\n/**\n * An accordion allows a user to toggle the display of sections of content.\n * The accordion component wraps accordion panels that can be selected and expanded. It accepts children to define the content displayed within.\n */\nclass Accordion extends Component {\n\tcomponentWillMount () {\n\t\tthis.generatedId = shortid.generate();\n\t}\n\n\trender () {\n\t\treturn (\n\t\t\t<ul\n\t\t\t\tname={this.props.id || this.generatedId}\n\t\t\t\tclassName={classNames('slds-accordion', this.props.className)}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</ul>\n\t\t);\n\t}\n}\n\nAccordion.displayName = ACCORDION;\nAccordion.propTypes = propTypes;\n\nexport default Accordion;\n"],"file":"index.js"}