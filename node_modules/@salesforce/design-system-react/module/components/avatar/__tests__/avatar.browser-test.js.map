{"version":3,"sources":["../../../../.tmp-es/components/avatar/__tests__/avatar.browser-test.jsx"],"names":["React","mount","chai","expect","chaiEnzyme","createMountNode","destroyMountNode","SLDSAvatar","IconSettings","use","describe","mountNode","wrapper","beforeEach","context","afterEach","it","expectedSrc","attachTo","img","find","src","prop","to","equal","avatar","node","not","be","undefined","circleClass","true","abbr","textContent","span","innerHTML"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-render-return-value */\n/* eslint-disable react/no-find-dom-node */\n\nimport React from 'react';\nimport { mount } from 'enzyme';\nimport chai, { expect } from 'chai';\nimport chaiEnzyme from 'chai-enzyme';\nimport {\n\tcreateMountNode,\n\tdestroyMountNode,\n} from '../../../tests/enzyme-helpers';\n\nimport SLDSAvatar from '../../avatar';\nimport IconSettings from '../../icon-settings';\n\nchai.use(chaiEnzyme());\n\ndescribe('SLDSAvatar: ', function () {\n\tlet mountNode;\n\tlet wrapper;\n\n\tdescribe('Default Structure', function () {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('avatar renders with image', () => {\n\t\t\tconst expectedSrc = 'success';\n\t\t\twrapper = mount(<SLDSAvatar imgSrc={expectedSrc} />, {\n\t\t\t\tattachTo: mountNode,\n\t\t\t});\n\n\t\t\tconst img = wrapper.find('img');\n\t\t\tconst src = img.prop('src');\n\t\t\texpect(src).to.equal(expectedSrc);\n\t\t});\n\n\t\tit('renders proper icon size class', () => {\n\t\t\twrapper = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar size=\"large\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\tconst avatar = wrapper.find('.slds-avatar_large');\n\t\t\texpect(avatar.node).to.not.be.undefined;\n\t\t});\n\n\t\tdescribe('variant is a user', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\twrapper = mount(\n\t\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t\t<SLDSAvatar variant=\"user\" />\n\t\t\t\t\t</IconSettings>,\n\t\t\t\t\t{ attachTo: mountNode }\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('displays as a circle', () => {\n\t\t\t\tconst circleClass = !!wrapper.find('.slds-avatar_circle');\n\t\t\t\texpect(circleClass).to.be.true;\n\t\t\t});\n\t\t});\n\n\t\tdescribe('variant is an entity', () => {\n\t\t\tbeforeEach(() => {\n\t\t\t\twrapper = mount(\n\t\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t\t<SLDSAvatar variant=\"entity\" />\n\t\t\t\t\t</IconSettings>,\n\t\t\t\t\t{ attachTo: mountNode }\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tit('displays as a square (no circle class)', () => {\n\t\t\t\tconst avatar = wrapper.find('.slds-avatar_circle');\n\t\t\t\texpect(avatar.node).to.be.undefined;\n\t\t\t});\n\t\t});\n\t});\n\n\tdescribe('Initials avatar fallback check', () => {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('renders \"iniitals prop\" initials if they are passed in directly', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar initials=\"AW\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\n\t\t\tconst abbr = avatar.find('abbr');\n\t\t\texpect(abbr.node.textContent).to.equal('AW');\n\t\t});\n\n\t\tit('renders fallback initials abbr node if initials or label prop exists', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"test\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = !!avatar.find('abbr');\n\t\t\texpect(abbr).to.be.true;\n\t\t});\n\n\t\tit('calls buildInitials in abbr node if no initials prop', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Jane Doe\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = avatar.find('abbr');\n\t\t\texpect(abbr.node.textContent).to.equal('JD');\n\t\t});\n\n\t\tit('renders first two letters of one word if label is one word', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = avatar.find('abbr');\n\t\t\texpect(abbr.node.textContent).to.equal('Ac');\n\t\t});\n\n\t\tit('renders first letters of each word if label is two words', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme Communications\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = avatar.find('abbr');\n\t\t\texpect(abbr.node.textContent).to.equal('AC');\n\t\t});\n\n\t\tit('renders first letters of first and last word if label is more than two words', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar label=\"Acme Communications Inc.\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst abbr = avatar.find('abbr');\n\t\t\texpect(abbr.node.textContent).to.equal('AI');\n\t\t});\n\t});\n\n\tdescribe('Icon avatar fallback check', () => {\n\t\tbeforeEach(() => {\n\t\t\tmountNode = createMountNode({ context: this });\n\t\t});\n\n\t\tafterEach(() => {\n\t\t\tdestroyMountNode({ wrapper, mountNode });\n\t\t});\n\n\t\tit('renders expected assistiveText', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar variant=\"entity\" assistiveText=\"entity icon avatar\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst span = avatar.find('.slds-assistive-text');\n\t\t\texpect(span.node.innerHTML).to.equal('entity icon avatar');\n\t\t});\n\n\t\tit('renders account icon', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar variant=\"entity\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst span = !!avatar.find('.slds-icon-standard-account').node;\n\t\t\texpect(span).to.be.true;\n\t\t});\n\n\t\tit('renders user icon', () => {\n\t\t\tconst avatar = mount(\n\t\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t\t<SLDSAvatar variant=\"user\" />\n\t\t\t\t</IconSettings>,\n\t\t\t\t{ attachTo: mountNode }\n\t\t\t);\n\t\t\tconst span = !!avatar.find('.slds-icon-standard-user').node;\n\t\t\texpect(span).to.be.true;\n\t\t});\n\t});\n});\n"],"file":"avatar.browser-test.js"}