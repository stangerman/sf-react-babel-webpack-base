{"version":3,"sources":["../../../.tmp-es/components/combobox/add-subheadings.js"],"names":["addSubheadings","subheadings","filteredOptions","subheadingsNotPresent","filteredOptionsWithSubheadings","map","option","subheadingRelatedToFilteredOption","filter","subheading","subheadingNotPresentInFilteredOptions","type","id","concat"],"mappings":";;;;;;;;AAAA;;AACA;;AAEA;;;AAIA,IAAMA,iBAAiB,SAAjBA,cAAiB,OAAsC;AAAA;;AAAA,MAAnCC,WAAmC,QAAnCA,WAAmC;AAAA,MAAtBC,eAAsB,QAAtBA,eAAsB;;AAC5D;AACA,MAAIC,2CAA4BF,WAA5B,CAAJ;;AAEA,MAAMG,iCAAiCF,gBAAgBG,GAAhB,CAAoB,UAACC,MAAD,EAAY;AACtE,QAAIC,iCAAJ,CADsE,CAGtE;AACA;AACA;;AACAJ,4BAAwBA,sBAAsBK,MAAtB,CAA6B,UAACC,UAAD,EAAgB;AACpE,UAAIC,wCAAwC,IAA5C;;AACA,UAAIJ,OAAOK,IAAP,KAAgBF,WAAWG,EAA/B,EAAmC;AAClCL,4CAAoCE,UAApC;AACAC,gDAAwC,KAAxC;AACA;;AACD,aAAOA,qCAAP;AACA,KAPuB,CAAxB,CANsE,CAetE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAOH,oCACJ,CAACA,iCAAD,EAAoCD,MAApC,CADI,GAEJ,CAACA,MAAD,CAFH;AAGA,GA3BsC,CAAvC,CAJ4D,CAiC5D;AACA;;AACA,SAAO,aAAGO,MAAH,iCAAaT,8BAAb,EAAP;AACA,CApCD;;AAsCA,eAAeJ,cAAf","sourcesContent":["/* Copyright (c) 2015-present, salesforce.com, inc. All rights reserved */\n/* Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license */\n\n/**\n * This is a UX pattern recommendation for auto-complete search results that can contain multiple subheadings within the results. It inserts a subheading object based on `option.type === subheading.id` directly before a found option object and only inserts the subheading at the first occurence of that type of option.\n */\n\nconst addSubheadings = ({ subheadings, filteredOptions }) => {\n\t// Let's not mutate things we don't own.\n\tlet subheadingsNotPresent = [...subheadings];\n\n\tconst filteredOptionsWithSubheadings = filteredOptions.map((option) => {\n\t\tlet subheadingRelatedToFilteredOption;\n\n\t\t// Remove subheadings that have been found from\n\t\t// `subheadingsNotPresent` and flag if they are\n\t\t// found.\n\t\tsubheadingsNotPresent = subheadingsNotPresent.filter((subheading) => {\n\t\t\tlet subheadingNotPresentInFilteredOptions = true;\n\t\t\tif (option.type === subheading.id) {\n\t\t\t\tsubheadingRelatedToFilteredOption = subheading;\n\t\t\t\tsubheadingNotPresentInFilteredOptions = false;\n\t\t\t}\n\t\t\treturn subheadingNotPresentInFilteredOptions;\n\t\t});\n\n\t\t// So that they can be inserted into the current filtered\n\t\t// options in a child array with the first related option\n\t\t// OUTPUT\n\t\t// Array [\n\t\t//   0: Array [\n\t\t//     0: {id: \"account\", label: \"Accounts\", type: \"separator\"}\n\t\t//     1: {id: \"1\", label: \"Acme\", type: \"account\"}\n\t\t//   ]\n\t\t// ]\n\t\treturn subheadingRelatedToFilteredOption\n\t\t\t? [subheadingRelatedToFilteredOption, option]\n\t\t\t: [option];\n\t});\n\n\t// flatten and remove child arrays, so that we have one array\n\t// `...` operates on each array item, not the array\n\treturn [].concat(...filteredOptionsWithSubheadings);\n};\n\nexport default addSubheadings;\n"],"file":"add-subheadings.js"}